{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Polkadot Developer Docs","text":"<p>Coming soon!</p>"},{"location":"LICENSE/","title":"LICENSE","text":"<p>Attribution 4.0 International</p> <p>=======================================================================</p> <p>Creative Commons Corporation (\"Creative Commons\") is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an \"as-is\" basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.</p> <p>Using Creative Commons Public Licenses</p> <p>Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.</p> <pre><code> Considerations for licensors: Our public licenses are\n intended for use by those authorized to give the public\n permission to use material in ways otherwise restricted by\n copyright and certain other rights. Our licenses are\n irrevocable. Licensors should read and understand the terms\n and conditions of the license they choose before applying it.\n Licensors should also secure all rights necessary before\n applying our licenses so that the public can reuse the\n material as expected. Licensors should clearly mark any\n material not subject to the license. This includes other CC-\n licensed material, or material used under an exception or\n limitation to copyright. More considerations for licensors:\nwiki.creativecommons.org/Considerations_for_licensors\n\n Considerations for the public: By using one of our public\n licenses, a licensor grants the public permission to use the\n licensed material under specified terms and conditions. If\n the licensor's permission is not necessary for any reason--for\n example, because of any applicable exception or limitation to\n copyright--then that use is not regulated by the license. Our\n licenses grant only permissions under copyright and certain\n other rights that a licensor has authority to grant. Use of\n the licensed material may still be restricted for other\n reasons, including because others have copyright or other\n rights in the material. A licensor may make special requests,\n such as asking that all changes be marked or described.\n Although not required by our licenses, you are encouraged to\n respect those requests where reasonable. More_considerations\n for the public:\nwiki.creativecommons.org/Considerations_for_licensees\n</code></pre> <p>=======================================================================</p> <p>Creative Commons Attribution 4.0 International Public License</p> <p>By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.</p> <p>Section 1 -- Definitions.</p> <p>a. Adapted Material means material subject to Copyright and Similar      Rights that is derived from or based upon the Licensed Material      and in which the Licensed Material is translated, altered,      arranged, transformed, or otherwise modified in a manner requiring      permission under the Copyright and Similar Rights held by the      Licensor. For purposes of this Public License, where the Licensed      Material is a musical work, performance, or sound recording,      Adapted Material is always produced where the Licensed Material is      synched in timed relation with a moving image.</p> <p>b. Adapter's License means the license You apply to Your Copyright      and Similar Rights in Your contributions to Adapted Material in      accordance with the terms and conditions of this Public License.</p> <p>c. Copyright and Similar Rights means copyright and/or similar rights      closely related to copyright including, without limitation,      performance, broadcast, sound recording, and Sui Generis Database      Rights, without regard to how the rights are labeled or      categorized. For purposes of this Public License, the rights      specified in Section 2(b)(1)-(2) are not Copyright and Similar      Rights.</p> <p>d. Effective Technological Measures means those measures that, in the      absence of proper authority, may not be circumvented under laws      fulfilling obligations under Article 11 of the WIPO Copyright      Treaty adopted on December 20, 1996, and/or similar international      agreements.</p> <p>e. Exceptions and Limitations means fair use, fair dealing, and/or      any other exception or limitation to Copyright and Similar Rights      that applies to Your use of the Licensed Material.</p> <p>f. Licensed Material means the artistic or literary work, database,      or other material to which the Licensor applied this Public      License.</p> <p>g. Licensed Rights means the rights granted to You subject to the      terms and conditions of this Public License, which are limited to      all Copyright and Similar Rights that apply to Your use of the      Licensed Material and that the Licensor has authority to license.</p> <p>h. Licensor means the individual(s) or entity(ies) granting rights      under this Public License.</p> <p>i. Share means to provide material to the public by any means or      process that requires permission under the Licensed Rights, such      as reproduction, public display, public performance, distribution,      dissemination, communication, or importation, and to make material      available to the public including in ways that members of the      public may access the material from a place and at a time      individually chosen by them.</p> <p>j. Sui Generis Database Rights means rights other than copyright      resulting from Directive 96/9/EC of the European Parliament and of      the Council of 11 March 1996 on the legal protection of databases,      as amended and/or succeeded, as well as other essentially      equivalent rights anywhere in the world.</p> <p>k. You means the individual or entity exercising the Licensed Rights      under this Public License. Your has a corresponding meaning.</p> <p>Section 2 -- Scope.</p> <p>a. License grant.</p> <pre><code>   1. Subject to the terms and conditions of this Public License,\n      the Licensor hereby grants You a worldwide, royalty-free,\n      non-sublicensable, non-exclusive, irrevocable license to\n      exercise the Licensed Rights in the Licensed Material to:\n\n        a. reproduce and Share the Licensed Material, in whole or\n           in part; and\n\n        b. produce, reproduce, and Share Adapted Material.\n\n   2. Exceptions and Limitations. For the avoidance of doubt, where\n      Exceptions and Limitations apply to Your use, this Public\n      License does not apply, and You do not need to comply with\n      its terms and conditions.\n\n   3. Term. The term of this Public License is specified in Section\n      6(a).\n\n   4. Media and formats; technical modifications allowed. The\n      Licensor authorizes You to exercise the Licensed Rights in\n      all media and formats whether now known or hereafter created,\n      and to make technical modifications necessary to do so. The\n      Licensor waives and/or agrees not to assert any right or\n      authority to forbid You from making technical modifications\n      necessary to exercise the Licensed Rights, including\n      technical modifications necessary to circumvent Effective\n      Technological Measures. For purposes of this Public License,\n      simply making modifications authorized by this Section 2(a)\n      (4) never produces Adapted Material.\n\n   5. Downstream recipients.\n\n        a. Offer from the Licensor -- Licensed Material. Every\n           recipient of the Licensed Material automatically\n           receives an offer from the Licensor to exercise the\n           Licensed Rights under the terms and conditions of this\n           Public License.\n\n        b. No downstream restrictions. You may not offer or impose\n           any additional or different terms or conditions on, or\n           apply any Effective Technological Measures to, the\n           Licensed Material if doing so restricts exercise of the\n           Licensed Rights by any recipient of the Licensed\n           Material.\n\n   6. No endorsement. Nothing in this Public License constitutes or\n      may be construed as permission to assert or imply that You\n      are, or that Your use of the Licensed Material is, connected\n      with, or sponsored, endorsed, or granted official status by,\n      the Licensor or others designated to receive attribution as\n      provided in Section 3(a)(1)(A)(i).\n</code></pre> <p>b. Other rights.</p> <pre><code>   1. Moral rights, such as the right of integrity, are not\n      licensed under this Public License, nor are publicity,\n      privacy, and/or other similar personality rights; however, to\n      the extent possible, the Licensor waives and/or agrees not to\n      assert any such rights held by the Licensor to the limited\n      extent necessary to allow You to exercise the Licensed\n      Rights, but not otherwise.\n\n   2. Patent and trademark rights are not licensed under this\n      Public License.\n\n   3. To the extent possible, the Licensor waives any right to\n      collect royalties from You for the exercise of the Licensed\n      Rights, whether directly or through a collecting society\n      under any voluntary or waivable statutory or compulsory\n      licensing scheme. In all other cases the Licensor expressly\n      reserves any right to collect such royalties.\n</code></pre> <p>Section 3 -- License Conditions.</p> <p>Your exercise of the Licensed Rights is expressly made subject to the following conditions.</p> <p>a. Attribution.</p> <pre><code>   1. If You Share the Licensed Material (including in modified\n      form), You must:\n\n        a. retain the following if it is supplied by the Licensor\n           with the Licensed Material:\n\n             i. identification of the creator(s) of the Licensed\n                Material and any others designated to receive\n                attribution, in any reasonable manner requested by\n                the Licensor (including by pseudonym if\n                designated);\n\n            ii. a copyright notice;\n\n           iii. a notice that refers to this Public License;\n\n            iv. a notice that refers to the disclaimer of\n                warranties;\n\n             v. a URI or hyperlink to the Licensed Material to the\n                extent reasonably practicable;\n\n        b. indicate if You modified the Licensed Material and\n           retain an indication of any previous modifications; and\n\n        c. indicate the Licensed Material is licensed under this\n           Public License, and include the text of, or the URI or\n           hyperlink to, this Public License.\n\n   2. You may satisfy the conditions in Section 3(a)(1) in any\n      reasonable manner based on the medium, means, and context in\n      which You Share the Licensed Material. For example, it may be\n      reasonable to satisfy the conditions by providing a URI or\n      hyperlink to a resource that includes the required\n      information.\n\n   3. If requested by the Licensor, You must remove any of the\n      information required by Section 3(a)(1)(A) to the extent\n      reasonably practicable.\n\n   4. If You Share Adapted Material You produce, the Adapter's\n      License You apply must not prevent recipients of the Adapted\n      Material from complying with this Public License.\n</code></pre> <p>Section 4 -- Sui Generis Database Rights.</p> <p>Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:</p> <p>a. for the avoidance of doubt, Section 2(a)(1) grants You the right      to extract, reuse, reproduce, and Share all or a substantial      portion of the contents of the database;</p> <p>b. if You include all or a substantial portion of the database      contents in a database in which You have Sui Generis Database      Rights, then the database in which You have Sui Generis Database      Rights (but not its individual contents) is Adapted Material; and</p> <p>c. You must comply with the conditions in Section 3(a) if You Share      all or a substantial portion of the contents of the database.</p> <p>For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.</p> <p>Section 5 -- Disclaimer of Warranties and Limitation of Liability.</p> <p>a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE      EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS      AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF      ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,      IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,      WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR      PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,      ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT      KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT      ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.</p> <p>b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE      TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,      NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,      INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,      COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR      USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN      ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR      DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR      IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.</p> <p>c. The disclaimer of warranties and limitation of liability provided      above shall be interpreted in a manner that, to the extent      possible, most closely approximates an absolute disclaimer and      waiver of all liability.</p> <p>Section 6 -- Term and Termination.</p> <p>a. This Public License applies for the term of the Copyright and      Similar Rights licensed here. However, if You fail to comply with      this Public License, then Your rights under this Public License      terminate automatically.</p> <p>b. Where Your right to use the Licensed Material has terminated under      Section 6(a), it reinstates:</p> <pre><code>   1. automatically as of the date the violation is cured, provided\n      it is cured within 30 days of Your discovery of the\n      violation; or\n\n   2. upon express reinstatement by the Licensor.\n\n For the avoidance of doubt, this Section 6(b) does not affect any\n right the Licensor may have to seek remedies for Your violations\n of this Public License.\n</code></pre> <p>c. For the avoidance of doubt, the Licensor may also offer the      Licensed Material under separate terms or conditions or stop      distributing the Licensed Material at any time; however, doing so      will not terminate this Public License.</p> <p>d. Sections 1, 5, 6, 7, and 8 survive termination of this Public      License.</p> <p>Section 7 -- Other Terms and Conditions.</p> <p>a. The Licensor shall not be bound by any additional or different      terms or conditions communicated by You unless expressly agreed.</p> <p>b. Any arrangements, understandings, or agreements regarding the      Licensed Material not stated herein are separate from and      independent of the terms and conditions of this Public License.</p> <p>Section 8 -- Interpretation.</p> <p>a. For the avoidance of doubt, this Public License does not, and      shall not be interpreted to, reduce, limit, restrict, or impose      conditions on any use of the Licensed Material that could lawfully      be made without permission under this Public License.</p> <p>b. To the extent possible, if any provision of this Public License is      deemed unenforceable, it shall be automatically reformed to the      minimum extent necessary to make it enforceable. If the provision      cannot be reformed, it shall be severed from this Public License      without affecting the enforceability of the remaining terms and      conditions.</p> <p>c. No term or condition of this Public License will be waived and no      failure to comply consented to unless expressly agreed to by the      Licensor.</p> <p>d. Nothing in this Public License constitutes or may be interpreted      as a limitation upon, or waiver of, any privileges and immunities      that apply to the Licensor or You, including from the legal      processes of any jurisdiction or authority.</p> <p>=======================================================================</p> <p>Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the \u201cLicensor.\u201d The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark \"Creative Commons\" or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.</p> <p>Creative Commons may be contacted at creativecommons.org</p>"},{"location":"develop/application-devs/tooling/chopsticks/overview/","title":"Chopsticks","text":""},{"location":"develop/application-devs/tooling/chopsticks/overview/#introduction","title":"Introduction","text":"<p>Chopsticks, created and maintained by the Acala Foundation, is a powerful tool designed to enhance the development process for Substrate-based blockchains. It offers developers a user-friendly method to locally fork existing chains, enabling them to:</p> <ul> <li>Experiment with custom blockchain configurations in a local environment</li> <li>Replay blocks and analyze how extrinsics affect state</li> <li>Fork multiple blocks for comprehensive XCM testing</li> </ul> <p>With Chopsticks, developers can simulate and test complex blockchain scenarios without deploying to a live network. This tool significantly reduces the complexity of building blockchain applications on Substrate, making it more accessible to developers of varying experience levels. Ultimately, Chopsticks aims to accelerate innovation in the Substrate ecosystem by providing a robust, flexible testing framework.</p> <p>For additional support and information, please reach out through GitHub Issues.</p> <p>Note</p> <p>Chopsticks uses Smoldot light client, which only supports the native Polkadot SDK API. Consequently, a Chopsticks-based fork doesn't support Ethereum JSON-RPC calls, so you cannot use it to fork your chain and connect Metamask.</p>"},{"location":"develop/application-devs/tooling/chopsticks/overview/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Node.js</li> <li>A package manager such as npm, which should be installed with Node.js by default, or Yarn</li> </ul>"},{"location":"develop/application-devs/tooling/chopsticks/overview/#install-chopsticks","title":"Install Chopsticks","text":"<p>You can install Chopsticks either globally or locally in your project. Choose the option that best fits your development workflow.</p> <p>Note</p> <p>This documentation explains the features of Chopsticks version <code>0.13.1</code>. Make sure you're using the correct version to match these instructions.</p>"},{"location":"develop/application-devs/tooling/chopsticks/overview/#global-installation","title":"Global Installation","text":"<p>To install Chopsticks globally, allowing you to use it across multiple projects, run:</p> <pre><code>npm i -g @acala-network/chopsticks@0.13.1\n</code></pre> <p>Now, you should be able to run the <code>chopsticks</code> command from your terminal.</p>"},{"location":"develop/application-devs/tooling/chopsticks/overview/#local-installation","title":"Local Installation","text":"<p>To use Chopsticks in a specific project, first create a new directory and initialize a Node.js project:</p> <pre><code>mkdir my-chopsticks-project\ncd my-chopsticks-project\nnpm init -y\n</code></pre> <p>Then, install Chopsticks as a local dependency:</p> <pre><code>npm i @acala-network/chopsticks@0.13.1\n</code></pre> <p>Finally, you can run Chopsticks using the <code>npx</code> command:</p> <pre><code>npx @acala-network/chopsticks\n</code></pre>"},{"location":"develop/application-devs/tooling/chopsticks/overview/#configuration","title":"Configuration","text":"<p>To run Chopsticks, you need to configure some parameters. This can be set either through using a configuration file or the command line interface (CLI). The parameters that can be configured are as follows:</p> <ul> <li><code>genesis</code> - the link to a parachain's raw genesis file to build the fork from, instead of an endpoint</li> <li><code>timestamp</code> - timestamp of the block to fork from</li> <li><code>endpoint</code> - the endpoint of the parachain to fork</li> <li><code>block</code> - use to specify at which block hash or number to replay the fork</li> <li><code>wasm-override</code> - path of the Wasm to use as the parachain runtime, instead of an endpoint's runtime</li> <li><code>db</code> - path to the name of the file that stores or will store the parachain's database</li> <li><code>config</code> - path or URL of the config file</li> <li><code>port</code> - the port to expose an endpoint on</li> <li><code>build-block-mode</code> - how blocks should be built in the fork: batch, manual, instant</li> <li><code>import-storage</code> - a pre-defined JSON/YAML storage path to override in the parachain's storage</li> <li><code>allow-unresolved-imports</code> - whether to allow Wasm unresolved imports when using a Wasm to build the parachain</li> <li><code>html</code> - include to generate storage diff preview between blocks</li> <li><code>mock-signature-host</code> - mock signature host so that any signature starts with <code>0xdeadbeef</code> and filled by <code>0xcd</code> is considered valid</li> </ul>"},{"location":"develop/application-devs/tooling/chopsticks/overview/#using-a-configuration-file","title":"Using a Configuration File","text":"<p>The Chopsticks source repository includes a collection of YAML files that can be used to set up various Substrate chains locally. You can download these configuration files from the repository's <code>configs</code> folder.</p> <p>An example of a configuration file for Polkadot is as follows:</p> <pre><code>endpoint:\n  - wss://rpc.ibp.network/polkadot\n  - wss://polkadot-rpc.dwellir.com\nmock-signature-host: true\nblock: ${env.POLKADOT_BLOCK_NUMBER}\ndb: ./db.sqlite\nruntime-log-level: 5\n\nimport-storage:\n  System:\n    Account:\n      - - - 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY\n        - providers: 1\n          data:\n            free: '10000000000000000000'\n  ParasDisputes:\n    $removePrefix: ['disputes'] # those can makes block building super slow\n</code></pre> <p>To run Chopsticks using a configuration file, utilize the <code>--config</code> flag. You can use a raw GitHub URL, a path to a local file, or simply the chain's name. For example, the following commands all use Polkadot's configuration in the same way:</p> GitHub URLLocal File PathChain Name <pre><code>npx @acala-network/chopsticks \\\n--config=https://raw.githubusercontent.com/AcalaNetwork/chopsticks/master/configs/polkadot.yml\n</code></pre> <pre><code>npx @acala-network/chopsticks --config=configs/polkadot.yml\n</code></pre> <pre><code>npx @acala-network/chopsticks --config=polkadot\n</code></pre> <p>Regardless of which method you choose from the preceding examples, you'll see an output similar to the following:</p> npx @acala-network/chopsticks --config=polkadot [18:38:26.155] INFO: Loading config file https://raw.githubusercontent.com/AcalaNetwork/chopsticks/master/configs/polkadot.yml     app: \"chopsticks\"         chopsticks::executor  TRACE: Calling Metadata_metadata         chopsticks::executor  TRACE: Completed Metadata_metadata [18:38:28.186] INFO: Polkadot RPC listening on port 8000     app: \"chopsticks\" <p>Note</p> <p>If using a file path, make sure you've downloaded the Polkadot configuration file, or have created your own.</p>"},{"location":"develop/application-devs/tooling/chopsticks/overview/#using-command-line-interface-cli","title":"Using Command Line Interface (CLI)","text":"<p>Alternatively, all settings (except for genesis and timestamp) can be configured via command-line flags, providing a comprehensive method to set up the environment. For example, the following command forks Polkadot at block 100.</p> <pre><code>npx @acala-network/chopsticks \\\n--endpoint wss://polkadot-rpc.dwellir.com \\\n--block 100\n</code></pre> npx @acala-network/chopsticks \\ --endpoint wss://polkadot-rpc.dwellir.com \\ --block 100 [19:12:21.023] INFO: Polkadot RPC listening on port 8000     app: \"chopsticks\""},{"location":"develop/application-devs/tooling/chopsticks/overview/#interacting-with-a-fork","title":"Interacting with a Fork","text":"<p>When running a fork, it's accessible by default at:</p> <pre><code>ws://localhost:8000\n</code></pre> <p>You can interact with the forked chain using various libraries such as Polkadot.js and its user interface, Polkadot.js Apps.</p>"},{"location":"develop/application-devs/tooling/chopsticks/overview/#using-polkadotjs-apps","title":"Using Polkadot.js Apps","text":"<p>To interact with Chopsticks via the hosted user interface, visit Polkadot.js Apps and follow these steps:</p> <ol> <li> <p>Click the network icon in the top left corner</p> <p></p> </li> <li> <p>Scroll to the bottom and select Development</p> </li> <li>Choose Custom</li> <li>Enter <code>ws://localhost:8000</code> in the input field</li> <li>Click the Switch button</li> </ol> <p></p> <p>You should now be connected to your local fork and can interact with it as you would with a real chain.</p>"},{"location":"develop/application-devs/tooling/chopsticks/overview/#using-polkadotjs-library","title":"Using Polkadot.js Library","text":"<p>For programmatic interaction, you can use the Polkadot.js library. Here's a basic example:</p> <pre><code>import { ApiPromise, WsProvider } from '@polkadot/api';\n\nasync function connectToFork() {\n  const wsProvider = new WsProvider('ws://localhost:8000');\n  const api = await ApiPromise.create({ provider: wsProvider });\n  await api.isReady;\n\n  // Now you can use 'api' to interact with your fork\n  console.log(`Connected to chain: ${await api.rpc.system.chain()}`);\n}\n\nconnectToFork();\n</code></pre>"},{"location":"develop/application-devs/tooling/chopsticks/overview/#replaying-blocks","title":"Replaying Blocks","text":"<p>Chopsticks allows you to replay specific blocks from a chain, which is useful for debugging and analyzing state changes. You can use the parameters in the Configuration section to set up the chain configuration, and then use the run-block subcommand with additional options:</p> <ul> <li><code>output-path</code> - path to print output</li> <li><code>html</code> - generate HTML with storage diff</li> <li><code>open</code> - open generated HTML</li> </ul> <p>For example, to replay block 1000 from Polkadot and save the output to a JSON file:</p> <pre><code>npx @acala-network/chopsticks run-block  \\\n--endpoint wss://polkadot-rpc.dwellir.com  \\\n--output-path ./polkadot-output.json  \\\n--block 1000\n</code></pre> Output file content <pre><code>{\n    \"Call\": {\n        \"result\": \"0xba754e7478944d07a1f7e914422b4d973b0855abeb6f81138fdca35beb474b44a10f6fc59a4d90c3b78e38fac100fc6adc6f9e69a07565ec8abce6165bd0d24078cc7bf34f450a2cc7faacc1fa1e244b959f0ed65437f44208876e1e5eefbf8dd34c040642414245b501030100000083e2cc0f00000000d889565422338aa58c0fd8ebac32234149c7ce1f22ac2447a02ef059b58d4430ca96ba18fbf27d06fe92ec86d8b348ef42f6d34435c791b952018d0a82cae40decfe5faf56203d88fdedee7b25f04b63f41f23da88c76c876db5c264dad2f70c\",\n        \"storageDiff\": [\n            [\n                \"0x0b76934f4cc08dee01012d059e1b83eebbd108c4899964f707fdaffb82636065\",\n                \"0x00\"\n            ],\n            [\n                \"0x1cb6f36e027abb2091cfb5110ab5087f0323475657e0890fbdbf66fb24b4649e\",\n                null\n            ],\n            [\n                \"0x1cb6f36e027abb2091cfb5110ab5087f06155b3cd9a8c9e5e9a23fd5dc13a5ed\",\n                \"0x83e2cc0f00000000\"\n            ],\n            [\n                \"0x1cb6f36e027abb2091cfb5110ab5087ffa92de910a7ce2bd58e99729c69727c1\",\n                null\n            ],\n            [\n                \"0x26aa394eea5630e07c48ae0c9558cef702a5c1b19ab7a04f536c519aca4983ac\",\n                null\n            ],\n            [\n                \"0x26aa394eea5630e07c48ae0c9558cef70a98fdbe9ce6c55837576c60c7af3850\",\n                \"0x02000000\"\n            ],\n            [\n                \"0x26aa394eea5630e07c48ae0c9558cef734abf5cb34d6244378cddbf18e849d96\",\n                \"0xc03b86ae010000000000000000000000\"\n            ],\n            [\n                \"0x26aa394eea5630e07c48ae0c9558cef780d41e5e16056765bc8461851072c9d7\",\n                \"0x080000000000000080e36a09000000000200000001000000000000ca9a3b00000000020000\"\n            ],\n            [\n                \"0x26aa394eea5630e07c48ae0c9558cef78a42f33323cb5ced3b44dd825fda9fcc\",\n                null\n            ],\n            [\n                \"0x26aa394eea5630e07c48ae0c9558cef799e7f93fc6a98f0874fd057f111c4d2d\",\n                null\n            ],\n            [\n                \"0x26aa394eea5630e07c48ae0c9558cef7a44704b568d21667356a5a050c118746d366e7fe86e06375e7030000\",\n                \"0xba754e7478944d07a1f7e914422b4d973b0855abeb6f81138fdca35beb474b44\"\n            ],\n            [\n                \"0x26aa394eea5630e07c48ae0c9558cef7a86da5a932684f199539836fcb8c886f\",\n                null\n            ],\n            [\n                \"0x26aa394eea5630e07c48ae0c9558cef7b06c3320c6ac196d813442e270868d63\",\n                null\n            ],\n            [\n                \"0x26aa394eea5630e07c48ae0c9558cef7bdc0bd303e9855813aa8a30d4efc5112\",\n                null\n            ],\n            [\n                \"0x26aa394eea5630e07c48ae0c9558cef7df1daeb8986837f21cc5d17596bb78d15153cb1f00942ff401000000\",\n                null\n            ],\n            [\n                \"0x26aa394eea5630e07c48ae0c9558cef7df1daeb8986837f21cc5d17596bb78d1b4def25cfda6ef3a00000000\",\n                null\n            ],\n            [\n                \"0x26aa394eea5630e07c48ae0c9558cef7ff553b5a9862a516939d82b3d3d8661a\",\n                null\n            ],\n            [\n                \"0x2b06af9719ac64d755623cda8ddd9b94b1c371ded9e9c565e89ba783c4d5f5f9b4def25cfda6ef3a000000006f3d6b177c8acbd8dc9974cdb3cebfac4d31333c30865ff66c35c1bf898df5c5dd2924d3280e7201\",\n                \"0x9b000000\"\n            ],\n            [\n                \"0x3a65787472696e7369635f696e646578\",\n                null\n            ],\n            [\n                \"0x3f1467a096bcd71a5b6a0c8155e208103f2edf3bdf381debe331ab7446addfdc\",\n                \"0x550057381efedcffffffffffffffffff\"\n            ],\n            [\n                \"0x3fba98689ebed1138735e0e7a5a790ab0f41321f75df7ea5127be2db4983c8b2\",\n                \"0x00\"\n            ],\n            [\n                \"0x3fba98689ebed1138735e0e7a5a790ab21a5051453bd3ae7ed269190f4653f3b\",\n                \"0x080000\"\n            ],\n            [\n                \"0x3fba98689ebed1138735e0e7a5a790abb984cfb497221deefcefb70073dcaac1\",\n                \"0x00\"\n            ],\n            [\n                \"0x5f3e4907f716ac89b6347d15ececedca80cc6574281671b299c1727d7ac68cabb4def25cfda6ef3a00000000\",\n                \"0x204e0000183887050ecff59f58658b3df63a16d03a00f92890f1517f48c2f6ccd215e5450e380e00005809fd84af6483070acbb92378e3498dbc02fb47f8e97f006bb83f60d7b2b15d980d000082104c22c383925323bf209d771dec6e1388285abe22c22d50de968467e0bb6ce00b000088ee494d719d68a18aade04903839ea37b6be99552ceceb530674b237afa9166480d0000dc9974cdb3cebfac4d31333c30865ff66c35c1bf898df5c5dd2924d3280e72011c0c0000e240d12c7ad07bb0e7785ee6837095ddeebb7aef84d6ed7ea87da197805b343a0c0d0000\"\n            ],\n            [\n                \"0xae394d879ddf7f99595bc0dd36e355b5bbd108c4899964f707fdaffb82636065\",\n                null\n            ],\n            [\n                \"0xbd2a529379475088d3e29a918cd478721a39ec767bd5269111e6492a1675702a\",\n                \"0x4501407565175cfbb5dca18a71e2433f838a3d946ef532c7bff041685db1a7c13d74252fffe343a960ef84b15187ea0276687d8cb3168aeea5202ea6d651cb646517102b81ff629ee6122430db98f2cadf09db7f298b49589b265dae833900f24baa8fb358d87e12f3e9f7986a9bf920c2fb48ce29886199646d2d12c6472952519463e80b411adef7e422a1595f1c1af4b5dd9b30996fba31fa6a30bd94d2022d6b35c8bc5a8a51161d47980bf4873e01d15afc364f8939a6ce5a09454ab7f2dd53bf4ee59f2c418e85aa6eb764ad218d0097fb656900c3bdd859771858f87bf7f06fc9b6db154e65d50d28e8b2374898f4f519517cd0bedc05814e0f5297dc04beb307b296a93cc14d53afb122769dfd402166568d8912a4dff9c2b1d4b6b34d811b40e5f3763e5f3ab5cd1da60d75c0ff3c12bcef3639f5f792a85709a29b752ffd1233c2ccae88ed3364843e2fa92bdb49021ee36b36c7cdc91b3e9ad32b9216082b6a2728fccd191a5cd43896f7e98460859ca59afbf7c7d93cd48da96866f983f5ff8e9ace6f47ee3e6c6edb074f578efbfb0907673ebca82a7e1805bc5c01cd2fa5a563777feeb84181654b7b738847c8e48d4f575c435ad798aec01631e03cf30fe94016752b5f087f05adf1713910767b7b0e6521013be5370776471191641c282fdfe7b7ccf3b2b100a83085cd3af2b0ad4ab3479448e71fc44ff987ec3a26be48161974b507fb3bc8ad23838f2d0c54c9685de67dc6256e71e739e9802d0e6e3b456f6dca75600bc04a19b3cc1605784f46595bfb10d5e077ce9602ae3820436166aa1905a7686b31a32d6809686462bc9591c0bc82d9e49825e5c68352d76f1ac6e527d8ac02db3213815080afad4c2ecb95b0386e3e9ab13d4f538771dac70d3059bd75a33d0b9b581ec33bb16d0e944355d4718daccb35553012adfcdacb1c5200a2aec3756f6ad5a2beffd30018c439c1b0c4c0f86dbf19d0ad59b1c9efb7fe90906febdb9001af1e7e15101089c1ab648b199a40794d30fe387894db25e614b23e833291a604d07eec2ade461b9b139d51f9b7e88475f16d6d23de6fe7831cc1dbba0da5efb22e3b26cd2732f45a2f9a5d52b6d6eaa38782357d9ae374132d647ef60816d5c98e6959f8858cfa674c8b0d340a8f607a68398a91b3a965585cc91e46d600b1310b8f59c65b7c19e9d14864a83c4ad6fa4ba1f75bba754e7478944d07a1f7e914422b4d973b0855abeb6f81138fdca35beb474b44c7736fc3ab2969878810153aa3c93fc08c99c478ed1bb57f647d3eb02f25cee122c70424643f4b106a7643acaa630a5c4ac39364c3cb14453055170c01b44e8b1ef007c7727494411958932ae8b3e0f80d67eec8e94dd2ff7bbe8c9e51ba7e27d50bd9f52cbaf9742edecb6c8af1aaf3e7c31542f7d946b52e0c37d194b3dd13c3fddd39db0749755c7044b3db1143a027ad428345d930afcefc0d03c3a0217147900bdea1f5830d826f7e75ecd1c4e2bc8fd7de3b35c6409acae1b2215e9e4fd7e360d6825dc712cbf9d87ae0fd4b349b624d19254e74331d66a39657da81e73d7b13adc1e5efa8efd65aa32c1a0a0315913166a590ae551c395c476116156cf9d872fd863893edb41774f33438161f9b973e3043f819d087ba18a0f1965e189012496b691f342f7618fa9db74e8089d4486c8bd1993efd30ff119976f5cc0558e29b417115f60fd8897e13b6de1a48fbeee38ed812fd267ae25bffea0caa71c09309899b34235676d5573a8c3cf994a3d7f0a5dbd57ab614c6caf2afa2e1a860c6307d6d9341884f1b16ef22945863335bb4af56e5ef5e239a55dbd449a4d4d3555c8a3ec5bd3260f88cabca88385fe57920d2d2dfc5d70812a8934af5691da5b91206e29df60065a94a0a8178d118f1f7baf768d934337f570f5ec68427506391f51ab4802c666cc1749a84b5773b948fcbe460534ed0e8d48a15c149d27d67deb8ea637c4cc28240ee829c386366a0b1d6a275763100da95374e46528a0adefd4510c38c77871e66aeda6b6bfd629d32af9b2fad36d392a1de23a683b7afd13d1e3d45dad97c740106a71ee308d8d0f94f6771164158c6cd3715e72ccfbc49a9cc49f21ead8a3c5795d64e95c15348c6bf8571478650192e52e96dd58f95ec2c0fb4f2ccc05b0ab749197db8d6d1c6de07d6e8cb2620d5c308881d1059b50ffef3947c273eaed7e56c73848e0809c4bd93619edd9fd08c8c5c88d5f230a55d2c6a354e5dd94440e7b5bf99326cf4a112fe843e7efdea56e97af845761d98f40ed2447bd04a424976fcf0fe0a0c72b97619f85cf431fe4c3aa6b3a4f61df8bc1179c11e77783bfedb7d374bd1668d0969333cb518bd20add8329462f2c9a9f04d150d60413fdd27271586405fd85048481fc2ae25b6826cb2c947e4231dc7b9a0d02a9a03f88460bced3fef5d78f732684bd218a1954a4acfc237d79ccf397913ab6864cd8a07e275b82a8a72520624738368d1c5f7e0eaa2b445cf6159f2081d3483618f7fc7b16ec4e6e4d67ab5541bcda0ca1af40efd77ef8653e223191448631a8108c5e50e340cd405767ecf932c1015aa8856b834143dc81fa0e8b9d1d8c32278fca390f2ff08181df0b74e2d13c9b7b1d85543416a0dae3a77530b9cd1366213fcf3cd12a9cd3ae0a006d6b29b5ffc5cdc1ab24343e2ab882abfd719892fca5bf2134731332c5d3bef6c6e4013d84a853cb03d972146b655f0f8541bcd36c3c0c8a775bb606edfe50d07a5047fd0fe01eb125e83673930bc89e91609fd6dfe97132679374d3de4a0b3db8d3f76f31bed53e247da591401d508d65f9ee01d3511ee70e3644f3ab5d333ca7dbf737fe75217b4582d50d98b5d59098ea11627b7ed3e3e6ee3012eadd326cf74ec77192e98619427eb0591e949bf314db0fb932ed8be58258fb4f08e0ccd2cd18b997fb5cf50c90d5df66a9f3bb203bd22061956128b800e0157528d45c7f7208c65d0592ad846a711fa3c5601d81bb318a45cc1313b122d4361a7d7a954645b04667ff3f81d3366109772a41f66ece09eb93130abe04f2a51bb30e767dd37ec6ee6a342a4969b8b342f841193f4f6a9f0fac4611bc31b6cab1d25262feb31db0b8889b6f8d78be23f033994f2d3e18e00f3b0218101e1a7082782aa3680efc8502e1536c30c8c336b06ae936e2bcf9bbfb20dd514ed2867c03d4f44954867c97db35677d30760f37622b85089cc5d182a89e29ab0c6b9ef18138b16ab91d59c2312884172afa4874e6989172014168d3ed8db3d9522d6cbd631d581d166787c93209bec845d112e0cbd825f6df8b64363411270921837cfb2f9e7f2e74cdb9cd0d2b02058e5efd9583e2651239654b887ea36ce9537c392fc5dfca8c5a0facbe95b87dfc4232f229bd12e67937d32b7ffae2e837687d2d292c08ff6194a2256b17254748857c7e3c871c3fff380115e6f7faf435a430edf9f8a589f6711720cfc5cec6c8d0d94886a39bb9ac6c50b2e8ef6cf860415192ca4c1c3aaa97d36394021a62164d5a63975bcd84b8e6d74f361c17101e3808b4d8c31d1ee1a5cf3a2feda1ca2c0fd5a50edc9d95e09fb5158c9f9b0eb5e2c90a47deb0459cea593201ae7597e2e9245aa5848680f546256f3\"\n            ],\n            [\n                \"0xd57bce545fb382c34570e5dfbf338f5e326d21bc67a4b34023d577585d72bfd7\",\n                null\n            ],\n            [\n                \"0xd57bce545fb382c34570e5dfbf338f5ea36180b5cfb9f6541f8849df92a6ec93\",\n                \"0x00\"\n            ],\n            [\n                \"0xd57bce545fb382c34570e5dfbf338f5ebddf84c5eb23e6f53af725880d8ffe90\",\n                null\n            ],\n            [\n                \"0xd5c41b52a371aa36c9254ce34324f2a53b996bb988ea8ee15bad3ffd2f68dbda\",\n                \"0x00\"\n            ],\n            [\n                \"0xf0c365c3cf59d671eb72da0e7a4113c49f1f0515f462cdcf84e0f1d6045dfcbb\",\n                \"0x50defc5172010000\"\n            ],\n            [\n                \"0xf0c365c3cf59d671eb72da0e7a4113c4bbd108c4899964f707fdaffb82636065\",\n                null\n            ],\n            [\n                \"0xf68f425cf5645aacb2ae59b51baed90420d49a14a763e1cbc887acd097f92014\",\n                \"0x9501800300008203000082030000840300008503000086030000870300008703000089030000890300008b0300008b0300008d0300008d0300008f0300008f0300009103000092030000920300009403000094030000960300009603000098030000990300009a0300009b0300009b0300009d0300009d0300009f0300009f030000a1030000a2030000a3030000a4030000a5030000a6030000a6030000a8030000a8030000aa030000ab030000ac030000ad030000ae030000af030000b0030000b1030000b1030000b3030000b3030000b5030000b6030000b7030000b8030000b9030000ba030000ba030000bc030000bc030000be030000be030000c0030000c1030000c2030000c2030000c4030000c5030000c5030000c7030000c7030000c9030000c9030000cb030000cc030000cd030000ce030000cf030000d0030000d0030000d2030000d2030000d4030000d4030000d6030000d7030000d8030000d9030000da030000db030000db030000dd030000dd030000df030000e0030000e1030000e2030000e3030000e4030000e4030000\"\n            ],\n            [\n                \"0xf68f425cf5645aacb2ae59b51baed9049b58374218f48eaf5bc23b7b3e7cf08a\",\n                \"0xb3030000\"\n            ],\n            [\n                \"0xf68f425cf5645aacb2ae59b51baed904b97380ce5f4e70fbf9d6b5866eb59527\",\n                \"0x9501800300008203000082030000840300008503000086030000870300008703000089030000890300008b0300008b0300008d0300008d0300008f0300008f0300009103000092030000920300009403000094030000960300009603000098030000990300009a0300009b0300009b0300009d0300009d0300009f0300009f030000a1030000a2030000a3030000a4030000a5030000a6030000a6030000a8030000a8030000aa030000ab030000ac030000ad030000ae030000af030000b0030000b1030000b1030000b3030000b3030000b5030000b6030000b7030000b8030000b9030000ba030000ba030000bc030000bc030000be030000be030000c0030000c1030000c2030000c2030000c4030000c5030000c5030000c7030000c7030000c9030000c9030000cb030000cc030000cd030000ce030000cf030000d0030000d0030000d2030000d2030000d4030000d4030000d6030000d7030000d8030000d9030000da030000db030000db030000dd030000dd030000df030000e0030000e1030000e2030000e3030000e4030000e4030000\"\n            ]\n        ],\n        \"offchainStorageDiff\": [],\n        \"runtimeLogs\": []\n    }\n}\n</code></pre>"},{"location":"develop/application-devs/tooling/chopsticks/overview/#xcm-testing","title":"XCM Testing","text":"<p>To test XCM (Cross-Consensus Messaging) messages between networks, you can fork multiple parachains and a relay chain locally using Chopsticks.</p> <ul> <li><code>relaychain</code> - relay chain config file</li> <li><code>parachain</code> - parachain config file  </li> </ul> <p>For example, to fork Moonbeam, Astar, and Polkadot enabling XCM between them, you can use the following command:</p> <pre><code>npx @acala-network/chopsticks xcm \\\n--r polkadot \\\n--p moonbeam \\\n--p astar\n</code></pre> <p>After running it, you should see output similar to the following:</p> npx @acala-network/chopsticks xcm \\ --r polkadot \\ --p moonbeam \\ --p astar [13:46:07.901] INFO: Loading config file https://raw.githubusercontent.com/AcalaNetwork/chopsticks/master/configs/moonbeam.yml     app: \"chopsticks\" [13:46:12.631] INFO: Moonbeam RPC listening on port 8000     app: \"chopsticks\" [13:46:12.632] INFO: Loading config file https://raw.githubusercontent.com/AcalaNetwork/chopsticks/master/configs/astar.yml     app: \"chopsticks\"         chopsticks::executor  TRACE: Calling Metadata_metadata         chopsticks::executor  TRACE: Completed Metadata_metadata [13:46:23.669] INFO: Astar RPC listening on port 8001     app: \"chopsticks\" [13:46:25.144] INFO (xcm): Connected parachains [2004,2006]     app: \"chopsticks\" [13:46:25.144] INFO: Loading config file https://raw.githubusercontent.com/AcalaNetwork/chopsticks/master/configs/polkadot.yml     app: \"chopsticks\"         chopsticks::executor  TRACE: Calling Metadata_metadata         chopsticks::executor  TRACE: Completed Metadata_metadata [13:46:53.320] INFO: Polkadot RPC listening on port 8002     app: \"chopsticks\" [13:46:54.038] INFO (xcm): Connected relaychain 'Polkadot' with parachain 'Moonbeam'     app: \"chopsticks\" [13:46:55.028] INFO (xcm): Connected relaychain 'Polkadot' with parachain 'Astar'     app: \"chopsticks\" <p>Now you can interact with your forked chains using the ports specified in the output.</p>"},{"location":"develop/application-devs/tooling/chopsticks/overview/#websocket-commands","title":"WebSocket Commands","text":"<p>Chopstick's internal WebSocket server has special endpoints that allow the manipulation of the local Substrate chain.</p> <p>These are the methods that can be invoked and their parameters:</p> dev_newBlock (newBlockParams) \u2014 Generates one or more new blocks ParametersExample <ul> <li><code>newBlockParams</code> NewBlockParams  - the parameters to build the new block with. Where the <code>NewBlockParams</code> interface includes the following properties:<ul> <li><code>count</code> number - the number of blocks to build</li> <li><code>dmp</code> { msg: string, sentAt: number }[] - the downward messages to include in the block</li> <li><code>hrmp</code> Record&lt;string | number, { data: string, sentAt: number }[]&gt; - the horizontal messages to include in the block</li> <li><code>to</code> number - the block number to build to</li> <li><code>transactions</code> string[] - the transactions to include in the block</li> <li><code>ump</code> Record&lt;number, string[]&gt; - the upward messages to include in the block</li> <li><code>unsafeBlockHeight</code> number - build block using a specific block height (unsafe)</li> </ul> </li> </ul> <pre><code>import { ApiPromise, WsProvider } from '@polkadot/api';\n\nasync function main() {\n  const wsProvider = new WsProvider('ws://localhost:8000');\n  const api = await ApiPromise.create({ provider: wsProvider });\n  await api.isReady;\n  await api.rpc('dev_newBlock', { count: 1 });\n}\n\nmain();\n</code></pre> dev_setBlockBuildMode (buildBlockMode) \u2014 Sets block build mode ParameterExample <ul> <li><code>buildBlockMode</code> BuildBlockMode - the build mode. Can be any of the following modes:     <pre><code>export enum BuildBlockMode {\n  Batch = 'Batch', /** One block per batch (default) */\n  Instant = 'Instant', /** One block per transaction */\n  Manual = 'Manual', /** Only build when triggered */\n}\n</code></pre></li> </ul> <pre><code>import { ApiPromise, WsProvider } from '@polkadot/api';\n\nasync function main() {\n  const wsProvider = new WsProvider('ws://localhost:8000');\n  const api = await ApiPromise.create({ provider: wsProvider });\n  await api.isReady;\n  await api.rpc('dev_setBlockBuildMode', 'Instant');\n}\n\nmain();\n</code></pre> dev_setHead (hashOrNumber) \u2014 Sets the head of the blockchain to a specific hash or number ParameterExample <ul> <li><code>hashOrNumber</code> string | number - the block hash or number to set as head</li> </ul> <pre><code>import { ApiPromise, WsProvider } from '@polkadot/api';\n\nasync function main() {\n  const wsProvider = new WsProvider('ws://localhost:8000');\n  const api = await ApiPromise.create({ provider: wsProvider });\n  await api.isReady;\n  await api.rpc('dev_setHead', 500);\n}\n\nmain();\n</code></pre> dev_setRuntimeLogLevel (runtimeLogLevel) \u2014 Sets the runtime log level ParameterExample <ul> <li><code>runtimeLogLevel</code> number - the runtime log level to set</li> </ul> <pre><code>import { ApiPromise, WsProvider } from '@polkadot/api';\n\nasync function main() {\n  const wsProvider = new WsProvider('ws://localhost:8000');\n  const api = await ApiPromise.create({ provider: wsProvider });\n  await api.isReady;\n  await api.rpc('dev_setRuntimeLogLevel', 1);\n}\n\nmain();\n</code></pre> dev_setStorage (values, blockHash) \u2014 Creates or overwrites the value of any storage ParametersExample <ul> <li><code>values</code> object - JSON object resembling the path to a storage value</li> <li><code>blockHash</code> string - the block hash to set the storage value</li> </ul> <pre><code>import { ApiPromise, WsProvider } from '@polkadot/api';\n\nimport { Keyring } from '@polkadot/keyring';\nasync function main() {\n  const wsProvider = new WsProvider('ws://localhost:8000');\n  const api = await ApiPromise.create({ provider: wsProvider });\n  await api.isReady;\n  const keyring = new Keyring({ type: 'ed25519' });\n  const bob = keyring.addFromUri('//Bob');\n  const storage = {\n    System: {\n      Account: [[[bob.address], { data: { free: 100000 }, nonce: 1 }]],\n    },\n  };\n  await api.rpc('dev_setStorage', storage);\n}\n\nmain();\n</code></pre> dev_timeTravel (date) \u2014 Sets the timestamp of the block to a specific date ParameterExample <ul> <li><code>date</code> string - timestamp or date string to set. All future blocks will be sequentially created after this point in time</li> </ul> <pre><code>import { ApiPromise, WsProvider } from '@polkadot/api';\n\nasync function main() {\n  const wsProvider = new WsProvider('ws://localhost:8000');\n  const api = await ApiPromise.create({ provider: wsProvider });\n  await api.isReady;\n  await api.rpc('dev_timeTravel', '2030-08-15T00:00:00');\n}\n\nmain();\n</code></pre>"},{"location":"develop/application-devs/tooling/zombienet/overview/","title":"Zombienet","text":""},{"location":"develop/application-devs/tooling/zombienet/overview/#introduction","title":"Introduction","text":"<p>Zombienet is a testing framework designed for Polkadot SDK-based blockchains. It provides a simple CLI tool for creating and testing blockchain environments locally or across networks. This allows developers to easily run and interact with blockchain nodes in a controlled environment. Zombienet is a\u00a0JavaScript\u00a0library designed to run on\u00a0Node.js\u00a0and supports various backend providers, including Kubernetes, Podman, and local setups for running blockchain nodes.</p> <p>The framework enables developers to create tests using natural language tools to verify on-chain storage, metrics, logs, and custom interactions with the blockchain. It is particularly effective for setting up local relaychains with validators and parachains with collators.</p> <p>Parity Technologies has designed and developed this framework, now maintained by the Zombienet team. For further support and information, refer to the following contact points:</p> <ul> <li>Zombienet repository</li> <li>Element public channel</li> </ul>"},{"location":"develop/application-devs/tooling/zombienet/overview/#install-zombienet","title":"Install Zombienet","text":"<p>Zombienet releases are available on the Zombienet repository.</p> <p>Toinstall Zombienet, there are multiple options available, depending on the user's preferences and the environment where it will be used. The following section will guide you through the installation process for each of the available options.</p> Using the ExecutableUsing NixUsing Docker <p>Zombienet executables can be downloaded using the latest release uploaded on the Zombienet repository. You can download the executable for your operating system and architecture and then move it to a directory in your PATH. Each release includes executables for Linux and macOS, which are generated using pkg. This allows the Zombienet CLI to operate without requiring Node.js to be installed. </p> <p>Alternatively, you can also download the executable using either <code>curl</code> or <code>wget</code>:</p> curlwget <pre><code>curl -LO \\\nhttps://github.com/paritytech/zombienet/releases/download/&lt;INSERT_ZOMBIENET_VERSION&gt;/&lt;INSERT_ZOMBIENET_EXECUTABLE&gt;\n</code></pre> <pre><code>wget \\\nhttps://github.com/paritytech/zombienet/releases/download/&lt;INSERT_ZOMBIENET_VERSION&gt;/&lt;INSERT_ZOMBIENET_EXECUTABLE&gt;\n</code></pre> <p>Note</p> <p>Ensure to replace the URL with the <code>&lt;INSERT_ZOMBIENET_VERSION&gt;</code> that you want to download, as well as the <code>&lt;INSERT_ZOMBIENET_EXECUTABLE&gt;</code> with the name of the executable file that matches your operating system and architecture. This guide uses <code>v1.3.106</code> and <code>zombienet-macos-arm64</code>.</p> <p>Note</p> <p>This documentation explains the functionality of Chopsticks version <code>0.13.1</code>. Make sure you're using the correct version to match these instructions.</p> <p>Then, ensure the downloaded file is executable:</p> <pre><code>chmod +x zombienet-macos-arm64\n</code></pre> <p>Finally, you can run the following command to check if the installation was successful. If so, it will display the version of the installed Zombienet:</p> <pre><code>./zombienet-macos-arm64 version\n</code></pre> <p>If you want to add the <code>zombienet</code> executable to your PATH, you can move it to a directory in your PATH, such as <code>/usr/local/bin</code>:</p> <pre><code>mv zombienet-macos-arm64 /usr/local/bin/zombienet\n</code></pre> <p>So then, you can refer to the <code>zombienet</code> executable directly:</p> <pre><code>zombienet version\n</code></pre> <p>So then, you can refer to the <code>zombienet</code> executable directly:</p> <pre><code>zombienet version\n</code></pre> <p>For Nix users, the Zombienet repository provides a <code>flake.nix</code> file that can be used to install Zombienet. This means that users can easily incorporate Zombienet into their Nix-based projects. </p> <p>To install Zombienet utilizing Nix, users can run the following command, triggering the fetching of the flake and subsequently installing the Zombienet package:</p> <pre><code>nix run github:paritytech/zombienet/INSERT_ZOMBIENET_VERSION -- \\\nspawn INSERT_ZOMBIENET_CONFIG_FILE_NAME.toml\n</code></pre> <p>Note</p> <p>Ensure to replace the <code>INSERT_ZOMBIENET_VERSION</code> with the desired version of Zombienet. Also, replace the <code>INSERT_ZOMBIENET_CONFIG_FILE_NAME</code> with the name of the configuration file you want to use.</p> <p>To run the command above, you need to have Flakes enabled.</p> <p>Alternatively, you can also include the Zombienet binary in the PATH for the current shell. This can be achieved by:</p> <pre><code>nix shell github:paritytech/zombienet/INSERT_ZOMBIENET_VERSION\n</code></pre> <p>Zombienet can also be run using Docker. The Zombienet repository provides a Docker image that can be used to run the Zombienet CLI. To run Zombienet using Docker, you can use the following command:</p> <p><pre><code>docker run -it --rm \\\n-v $(pwd):/home/nonroot/zombie-net/host-current-files \\\nparitytech/zombienet\n</code></pre> The command above will run the Zombienet CLI inside a Docker container and mount the current directory to the <code>/home/nonroot/zombie-net/host-current-files</code> directory inside the container. This allows Zombienet to access the configuration file and other files in the current directory. If you want to mount a different directory, replace <code>$(pwd)</code> with the desired directory path.</p> <p>Inside the Docker container, you can run the Zombienet CLI commands. First, you need to set up Zombienet downloading the necessary binaries:</p> <pre><code>npm run zombie -- setup polkadot polkadot-parachain\n</code></pre> <p>After that, you need to add those binaries to the PATH:</p> <pre><code>export PATH=/home/nonroot/zombie-net:$PATH\n</code></pre> <p>Finally, you can run the Zombienet CLI commands. For example, to spawn a network using a specific configuration file, you can run the following command:</p> <pre><code>npm run zombie -- -p native spawn host-current-files/minimal.toml\n</code></pre> <p>The command above mounts the current directory to the <code>/workspace</code> directory inside the Docker container. This allows Zombienet to access the configuration file and other files in the current directory. If you want to mount a different directory, replace <code>$(pwd)</code> with the desired directory path.</p>"},{"location":"develop/application-devs/tooling/zombienet/overview/#providers","title":"Providers","text":"<p>Zombienet supports different backend\u00a0providers\u00a0for running the\u00a0nodes. At this moment, Kubernetes,\u00a0Podman, and\u00a0local\u00a0are supported, which can be declared as <code>kubernetes</code>, <code>podman</code>, or <code>native</code>, respectively.</p> <p>To use a particular provider, you can specify it in the network file or use the <code>--provider</code> flag in the CLI:</p> <pre><code>zombienet spawn network.toml --provider INSERT_PROVIDER\n</code></pre> <p>Alternatively, you can set the provider in the network file:</p> <pre><code>[settings]\nprovider = \"INSERT_PROVIDER\"\n...\n</code></pre> <p>At the moment, Zombienet supports the following providers: <code>kubernetes</code>, <code>podman</code>, and <code>native</code>.</p> <p>It's important to note that each provider has specific requirements and associated features. The subsequent sections will guide you through the installation process for each provider and the requirements and features each provider offers.</p>"},{"location":"develop/application-devs/tooling/zombienet/overview/#kubernetes","title":"Kubernetes","text":""},{"location":"develop/application-devs/tooling/zombienet/overview/#requirements","title":"Requirements","text":"<p>Zombienet is designed to be compatible with a variety of Kubernetes clusters, including Google Kubernetes Engine (GKE), Docker Desktop, and kind. To effectively interact with your cluster, you'll need to ensure that <code>kubectl</code> is installed on your system, which is the Kubernetes command-line tool that allows you to run commands against Kubernetes clusters. If you don't have <code>kubectl</code> installed, you can follow the instructions provided on the Kubernetes website.</p> <p>Moreover, to create resources such as namespaces, pods, and CronJobs within the target cluster, you must have the appropriate permissions granted to your user or service account. These permissions are essential for managing and deploying applications effectively within Kubernetes.</p>"},{"location":"develop/application-devs/tooling/zombienet/overview/#features","title":"Features","text":"<p>In Kubernetes, Zombienet uses the Prometheus operator (if available) to oversee monitoring and visibility. This configuration ensures that only essential networking-related pods are deployed. Using the Prometheus operator, Zombienet improves its ability to efficiently monitor and manage network activities within the Kubernetes cluster. </p>"},{"location":"develop/application-devs/tooling/zombienet/overview/#podman","title":"Podman","text":""},{"location":"develop/application-devs/tooling/zombienet/overview/#requirements_1","title":"Requirements","text":"<p>Zombienet supports Podman rootless as a provider. To use Podman as a provider, you need to have Podman installed on your system. Podman is a daemonless container engine for developing, managing, and running Open Container Initiative (OCI) containers and container images on Linux-based systems. You can install Podman by following the instructions provided on the Podman website.</p> <p>Warning</p> <p>Currently, Podman can only be used with Zombienet on Linux machines. Although Podman has support for macOS through an internal VM, the Zombienet provider code requires Podman to run natively on Linux.</p>"},{"location":"develop/application-devs/tooling/zombienet/overview/#features_1","title":"Features","text":"<p>Using Podman, Zombienet deploys additional pods to enhance the monitoring and visibility of the active network. Specifically, pods for Prometheus, Tempo, and Grafana are included in the deployment. Grafana is configured with Prometheus and Tempo as data sources.</p> <p>Upon launching Zombienet, access to these monitoring services is facilitated through specific URLs provided in the output:</p> <ul> <li>Prometheus - http://127.0.0.1:34123</li> <li>Tempo - http://127.0.0.1:34125</li> <li>Grafana - http://127.0.0.1:41461</li> </ul> <p>It's important to note that Grafana is deployed with default administrator access.</p> <p>Note</p> <p>When network operations cease \u2014either by halting a running spawn with Ctrl+C or upon completion of the test\u2014 Zombienet automatically removes all associated pods.</p>"},{"location":"develop/application-devs/tooling/zombienet/overview/#local","title":"Local","text":""},{"location":"develop/application-devs/tooling/zombienet/overview/#requirements_2","title":"Requirements","text":"<p>The Zombienet local provider, also referred to as native, enables you to run nodes as local processes in your environment. You must have the necessary binaries for your network (such as <code>polkadot</code> and <code>polkadot-parachain</code>). These binaries should be available in your PATH, allowing Zombienet to spawn the nodes as local processes.</p> <p>To install the necessary binaries, you can use the Zombienet CLI command:</p> <pre><code>zombienet setup polkadot polkadot-parachain\n</code></pre> <p>This command will download and prepare the necessary binaries for Zombienet\u2019s use.</p> <p>Warning</p> <p>The <code>polkadot</code> and <code>polkadot-parachain</code> binaries releases aren't compatible with macOS. As a result, macOS users will need to clone the Polkadot repository, build the Polkadot binary, and manually add it to their PATH for <code>polkadot</code> and <code>polkadot-parachain</code> to work.</p> <p>If you need to use a custom binary, ensure the binary is available in your PATH. You can also specify the binary path in the network configuration file. To showcase this, this guide will use the custom OpenZeppelin template as an example.</p> <p>First, clone the OpenZeppelin template repository:</p> <pre><code>git clone https://github.com/OpenZeppelin/polkadot-runtime-templates \\\n&amp;&amp; cd polkadot-runtime-templates/generic-template\n\nThen, build the custom binary:\n\n```bash\ncargo build --release\n</code></pre> <p>After that, add the custom binary to your PATH:</p> <pre><code>export PATH=$PATH:/path/to/polkadot-runtime-templates/parachain-template-node/target/release\n</code></pre> <p>Alternatively, you can specify the binary path in the network configuration file:</p> <pre><code>[relaychain]\nchain = \"rococo-local\"\ndefault_command = \"./bin-v1.6.0/polkadot\"\n\n[parachain]\nid = 1000\n\n    [parachain.collators]\n    name = \"collator01\"\n    command = \"./target/release/parachain-template-node\"\n</code></pre> <p>Note</p> <p>The local provider exclusively utilizes the command configuration for nodes/collators, which supports both relative and absolute paths. You can employ the <code>default_command</code> configuration to specify the binary for spawning all nodes in the relay chain.</p>"},{"location":"develop/application-devs/tooling/zombienet/overview/#features_2","title":"Features","text":"<p>Currently, the local provider doesn't execute any additional layers or processes.</p>"},{"location":"develop/application-devs/tooling/zombienet/overview/#cli-usage","title":"CLI Usage","text":"<p>Zombienet provides a CLI that allows interaction with the tool. The CLI can receive commands and flags to perform different kinds of operations. These operations can be initiated using the following syntax:</p> <pre><code>zombienet &lt;arguments&gt; &lt;commands&gt;\n</code></pre> <p>The following sections will guide you through the primary usage of the Zombienet CLI and the available commands and flags.</p>"},{"location":"develop/application-devs/tooling/zombienet/overview/#cli-commands","title":"CLI Commands","text":"<code>spawn</code> - spawn the network defined in the configuration file Argument <ul> <li><code>&lt;networkConfig&gt;</code> - a file that declares the desired network to be spawned in <code>.toml</code> or <code>.json</code> format. For further information, check out the Configuration Files section</li> </ul> <p>Warning</p> <p>For the <code>spawn</code> command to work on macOS, users need to be aware that the Polkadot binary is currently not compatible with macOS. As a result, macOS users will need to clone the Polkadot repository, build Polkadot binary, and manually add it to their PATH.</p> <code>test</code> - run test on the network spawned Argument <ul> <li><code>&lt;testFile&gt;</code> - a file that defines assertions and tests against the spawned network, using natural language expressions to evaluate metrics, logs, and built-in functions</li> </ul> <code>setup</code> - set up the Zombienet development environment Argument <ul> <li><code>&lt;binaries&gt;</code> - executables that will be downloaded and prepared to be used by Zombienet. Options: <code>polkadot</code>, <code>polkadot-parachain</code></li> </ul> <code>convert</code> - transforms a (now deprecated) polkadot-launch configuration file to a Zombienet configuration file Argument <ul> <li><code>&lt;filePath&gt;</code> - path to a polkadot-launch configuration file with a <code>.js</code> or <code>.json</code> extension defined by the <code>LaunchConfig</code> interface</li> </ul> <code>version</code> - prints Zombienet version Argument <p>None </p> <code>help</code> - prints help information Argument <p>None </p>"},{"location":"develop/application-devs/tooling/zombienet/overview/#cli-flags","title":"CLI Flags","text":"<p>You can use the following flags to customize the behavior of the CLI:</p> <code>-p</code>, <code>--provider</code> - override provider to use. Defaults to <code>kubernetes</code> Argument <ul> <li><code>&lt;provider&gt;</code> - the provider to use. Options: <code>podman</code>, <code>kubernetes</code>, <code>native</code></li> </ul> <code>-d</code>, <code>--dir</code> - directory path for placing the network files instead of random temp one ArgumentExample <ul> <li><code>&lt;path&gt;</code> - desired path for network files  </li> </ul> <p><code>zombienet -d /home/user/my-zombienet</code></p> <code>-f</code>, <code>--force</code> - force override all prompt commands Argument <p>None</p> <code>-l</code>, <code>--logType</code> - type of logging on the console. Defaults to <code>table</code> Argument <ul> <li><code>&lt;logType&gt;</code> desired type of logging. Options: <code>table</code>, <code>text</code>, <code>silent</code></li> </ul> <code>-m</code>, <code>--monitor</code> - start as monitor, don't auto clean up network Argument <p>None</p> <code>-c</code>, <code>--spawn-concurrency</code> - number of concurrent spawning processes to launch. Defaults to <code>1</code> Argument <ul> <li><code>&lt;concurrency&gt;</code> - desired quantity of processes</li> </ul> <code>-h</code>, <code>--help</code> - display help for command Argument <p>None</p>"},{"location":"develop/application-devs/tooling/zombienet/overview/#configuration-files","title":"Configuration Files","text":"<p>The network configuration can be given in either JSON or TOML format. The Zombienet repository also provides a folder with some examples of configuration files that can be used as a reference.</p> <p>Note</p> <p>Each section may include provider-specific keys that aren't recognized by other providers. For example, if you use the local provider, any references to images for nodes will be disregarded.</p>"},{"location":"develop/application-devs/tooling/zombienet/overview/#settings","title":"Settings","text":"<p>Through the keyword <code>settings</code>, it's possible to define the general settings for the network. The available keys are:</p> <ul> <li><code>global_volumes?</code> GlobalVolume[] - a list of global volumes to use. The <code>GlobalVolume</code> interface is defined as follows:    <pre><code>export interface GlobalVolume {\n  name: string;\n  fs_type: string;\n  mount_path: string;\n}\n</code></pre></li> <li><code>bootnode</code> boolean - add bootnode to network. Default is <code>true</code></li> <li><code>bootnode_domain?</code> string - domain to use for bootnode</li> <li><code>timeout</code> number - global timeout to use for spawning the whole network\"</li> <li><code>node_spawn_timeout?</code> number - timeout to spawn pod/process</li> <li><code>grafana?</code> boolean - deploy an instance of Grafana</li> <li><code>prometheus?</code> boolean - deploy an instance of Prometheus</li> <li><code>telemetry?</code> boolean - enable telemetry for the network</li> <li><code>jaeger_agent?</code> string - the Jaeger agent endpoint passed to the nodes. Only available on Kubernetes</li> <li><code>tracing_collator_url?</code> string - the URL of the tracing collator used to query by the tracing assertion. Should be tempo query compatible</li> <li><code>tracing_collator_service_name?</code> string - service name for tempo query frontend. Only available on Kubernetes. Defaults to <code>tempo-tempo-distributed-query-frontend</code></li> <li><code>tracing_collator_service_namespace?</code> string - namespace where tempo is running. Only available on Kubernetes. Defaults to <code>tempo</code></li> <li><code>tracing_collator_service_port?</code> number - port of the query instance of tempo. Only available on Kubernetes. Defaults to <code>3100</code></li> <li><code>enable_tracing?</code> boolean - enable the tracing system. Only available on Kubernetes. Defaults to <code>true</code></li> <li><code>provider</code> string - provider to use. Default is <code>kubernetes</code>\"</li> <li><code>polkadot_introspector?</code> boolean - deploy an instance of polkadot-introspector. Only available on Podman and Kubernetes. Defaults to <code>false</code></li> <li><code>backchannel?</code> boolean - deploy an instance of backchannel server. Only available on Kubernetes. Defaults to <code>false</code></li> <li><code>image_pull_policy?</code> string - image pull policy to use in the network. Possible values are <code>Always</code>, <code>IfNotPresent</code>, and <code>Never</code></li> <li><code>local_ip?</code> string - IP used for exposing local services (rpc/metrics/monitors). Defaults to <code>\"127.0.0.1\"</code></li> <li><code>global_delay_network_global_settings?</code> number - delay in seconds to apply to the network</li> <li><code>node_verifier?</code> string - specify how to verify node readiness or deactivate by using <code>None</code>. Possible values are <code>None</code> and <code>Metric</code>. Defaults to <code>Metric</code></li> </ul> <p>For example, the following configuration file defines a minimal example for the settings:</p> TOMLJSON base-example.toml<pre><code>[settings]\ntimeout = 1000\nbootnode = false\nprovider = \"kubernetes\"\nbackchannel = false\n...\n</code></pre> base-example.json<pre><code>{\n    \"settings\": {\n        \"timeout\": 1000,\n        \"bootnode\": false,\n        \"provider\": \"kubernetes\",\n        \"backchannel\": false,\n        ...\n    },\n    ...\n}\n</code></pre>"},{"location":"develop/application-devs/tooling/zombienet/overview/#relay-chain-configuration","title":"Relay Chain Configuration","text":"<p>You can use the <code>relaychain</code> keyword to define further parameters for the relay chain at start-up. The available keys are:</p> <ul> <li><code>default_command?</code> string - the default command to run. Defaults to <code>polkadot</code></li> <li><code>default_image?</code> string - the default Docker image to use</li> <li><code>default_resources?</code> Resources - represents the resources limits/reservations needed by the nodes by default. Only available on Kubernetes. The <code>Resources</code> interface is defined as follows:   <pre><code>export interface Resources {\n  resources: {\n    requests?: {\n      memory?: string;\n      cpu?: string;\n    };\n    limits?: {\n      memory?: string;\n      cpu?: string;\n    };\n  };\n}\n</code></pre></li> <li><code>default_db_snapshot?</code> string - the default database snapshot to use</li> <li><code>default_prometheus_prefix</code> string - a parameter for customizing the metric's prefix. Defaults to <code>substrate</code></li> <li><code>default_substrate_cli_args_version?</code> SubstrateCliArgsVersion - set the Substrate CLI arguments version. The <code>SubstrateCliArgsVersion</code> enum is defined as follows:   <pre><code>export enum SubstrateCliArgsVersion {\n  V0 = 0,\n  V1 = 1,\n  V2 = 2,\n  V3 = 3,\n}\n</code></pre></li> <li><code>default_keystore_key_types?</code> string[] - defines which keystore keys should be created </li> <li><code>chain</code> string - the chain name</li> <li><code>chain_spec_path?</code> string - path to the chain spec file. Should be the plain version to allow customizations</li> <li><code>chain_spec_command?</code> string - command to generate the chain spec. It can't be used in combination with <code>chain_spec_path</code></li> <li><code>default_args?</code> string[] - an array of arguments to use as default to pass to the command</li> <li><code>default_overrides?</code> Override[] - an array of overrides to upload to the node. The <code>Override</code> interface is defined as follows:   <pre><code>export interface Override {\n  local_path: string;\n  remote_name: string;\n} \n</code></pre></li> <li><code>random_nominators_count?</code> number - if set and the stacking pallet is enabled, Zombienet will generate the input quantity of nominators and inject them into the genesis</li> <li><code>max_nominations</code> number - the max number of nominations allowed by a nominator. Should match the value set in the runtime. Defaults to <code>24</code></li> <li><code>nodes?</code> Node[] - an array of nodes to spawn. It is further defined on the Node Configuration section</li> <li><code>node_groups?</code> NodeGroup[] - an array of node groups to spawn. It is further defined on the Node Group Configuration section</li> <li><code>total_node_in_group?</code> number - the total number of nodes in the group. Defaults to <code>1</code></li> <li><code>genesis</code> JSON - the genesis configuration</li> <li><code>default_delay_network_settings?</code> DelayNetworkSettings - sets the expected configuration to delay the network. The <code>DelayNetworkSettings</code> interface is defined as follows:   <pre><code>export interface DelayNetworkSettings {\n  latency: string;\n  correlation?: string; // should be parsable as float by k8s\n  jitter?: string;\n}\n</code></pre></li> </ul>"},{"location":"develop/application-devs/tooling/zombienet/overview/#node-configuration","title":"Node Configuration","text":"<p>There is one specific key capable of receiving more subkeys: the <code>nodes</code> key. This key is used to define further parameters for the nodes. The available keys:</p> <ul> <li><code>name</code> string - name of the node. Any whitespace will be replaced with a dash (for example, <code>new alice</code> will be converted to <code>new-alice</code>)</li> <li><code>image?</code> string - override default Docker image to use for this node</li> <li><code>command?</code> string - override default command to run</li> <li><code>command_with_args?</code> string - override default command and arguments</li> <li><code>args?</code> string[] - arguments to be passed to the command</li> <li><code>env?</code> envVars[] - environment variables to set in the container. The <code>envVars</code> interface is defined as follows:   <pre><code>export interface EnvVars {\n  name: string;\n  value: string;\n}\n</code></pre></li> <li><code>overrides?</code> Override[] - array of overrides definitions. The <code>Override</code> interface is defined as follows:   <pre><code>export interface Override {\n  local_path: string;\n  remote_name: string;\n}\n</code></pre></li> <li><code>prometheus_prefix?</code> string - customizes the metric's prefix for the specific node. Defaults to <code>substrate</code></li> <li><code>db_snapshot?</code> string - database snapshot to use</li> <li><code>substrate_cli_args_version?</code> SubstrateCliArgsVersion - set the Substrate CLI arguments version directly to skip binary evaluation overhead. The <code>SubstrateCliArgsVersion</code> enum is defined as follows:   <pre><code>export enum SubstrateCliArgsVersion {\n  V0 = 0,\n  V1 = 1,\n  V2 = 2,\n  V3 = 3,\n}\n</code></pre></li> <li><code>resources?</code> Resources - represent the resources limits/reservations needed by the node. The <code>Resources</code> interface is defined as follows:   <pre><code>export interface Resources {\n  resources: {\n    requests?: {\n      memory?: string;\n      cpu?: string;\n    };\n    limits?: {\n      memory?: string;\n      cpu?: string;\n    };\n  };\n}\n</code></pre></li> <li><code>keystore_key_types?</code> string[] - defines which keystore keys should be created</li> <li><code>validator</code> boolean - pass the <code>--validator</code> flag to the command. Defaults to <code>true</code></li> <li><code>invulnerable</code> boolean - if true, add the node to invulnerables in the chain spec. Defaults to <code>false</code></li> <li><code>balance</code> number - balance to set in balances for node's account. Defaults to <code>2000000000000</code></li> <li><code>bootnodes?</code> string[] - array of bootnodes to use</li> <li><code>add_to_bootnodes?</code> boolean - add this node to the bootnode list. Defaults to <code>false</code></li> <li><code>ws_port?</code> number - WS port to use</li> <li><code>rpc_port?</code> number - RPC port to use</li> <li><code>prometheus_port?</code> number - Prometheus port to use</li> <li><code>p2p_cert_hash?</code> string - libp2p certhash to use with webRTC transport</li> <li><code>delay_network_settings?</code> DelayNetworkSettings - sets the expected configuration to delay the network. The <code>DelayNetworkSettings</code> interface is defined as follows:   <pre><code>export interface DelayNetworkSettings {\n  latency: string;\n  correlation?: string; // should be parsable as float by k8s\n  jitter?: string;\n}\n</code></pre></li> </ul> <p>The following configuration file defines a minimal example for the relay chain, including the <code>nodes</code> key:</p> TOMLJSON relaychain-example-nodes.toml<pre><code>[relaychain]\ndefault_command = \"polkadot\"\ndefault_image = \"polkadot-debug:master\"\nchain = \"rococo-local\"\nchain_spec_path = \"/path/to/chain-spec.json\"\ndefault_args = [\"--chain\", \"rococo-local\"]\n\n[[relaychain.nodes]]\nname = \"alice\"\nvalidator = true\nbalance = 1000000000000\n\n[[relaychain.nodes]]\nname = \"bob\"\nvalidator = true\nbalance = 1000000000000\n...\n</code></pre> relaychain-example-nodes.json<pre><code>{\n    ...,\n    \"relaychain\": {\n        \"default_command\": \"polkadot\",\n        \"default_image\": \"polkadot-debug:master\",\n        \"chain\": \"rococo-local\",\n        \"chain_spec_path\": \"/path/to/chain-spec.json\",\n        \"default_args\": [\"--chain\", \"rococo-local\"],\n        \"nodes\": [\n            {\n                \"name\": \"alice\",\n                \"validator\": true,\n                \"balance\": 1000000000000\n            },\n            {\n                \"name\": \"bob\",\n                \"validator\": true,\n                \"balance\": 1000000000000\n            }\n        ],\n        ...\n    },\n    ...\n}\n</code></pre>"},{"location":"develop/application-devs/tooling/zombienet/overview/#node-group-configuration","title":"Node Group Configuration","text":"<p>The <code>node_groups</code> key is used to define further parameters for the node groups. The available keys are:</p> <ul> <li><code>name</code> string - name of the node. Any whitespace will be replaced with a dash (for example, <code>new alice</code> will be converted to <code>new-alice</code>)</li> <li><code>image?</code> string - override default Docker image to use for this node</li> <li><code>command?</code> string - override default command to run</li> <li><code>args?</code> string[] - arguments to be passed to the command</li> <li><code>env?</code> envVars[] - environment variables to set in the container. The <code>envVars</code> interface is defined as follows:   <pre><code>export interface EnvVars {\n  name: string;\n  value: string;\n}\n</code></pre></li> <li><code>overrides?</code> Override[] - array of overrides definitions. The <code>Override</code> interface is defined as follows:   <pre><code>export interface Override {\n  local_path: string;\n  remote_name: string;\n}\n</code></pre></li> <li><code>prometheus_prefix?</code> string - customizes the metric's prefix for the specific node. Defaults to <code>substrate</code></li> <li><code>db_snapshot?</code> string - database snapshot to use</li> <li><code>substrate_cli_args_version?</code> SubstrateCliArgsVersion - set the Substrate CLI arguments version directly to skip binary evaluation overhead. The <code>SubstrateCliArgsVersion</code> enum is defined as follows:   <pre><code>export enum SubstrateCliArgsVersion {\n  V0 = 0,\n  V1 = 1,\n  V2 = 2,\n  V3 = 3,\n}\n</code></pre></li> <li><code>resources?</code> Resources - represent the resources limits/reservations needed by the node. The <code>Resources</code> interface is defined as follows:   <pre><code>export interface Resources {\n  resources: {\n    requests?: {\n      memory?: string;\n      cpu?: string;\n    };\n    limits?: {\n      memory?: string;\n      cpu?: string;\n    };\n  };\n}\n</code></pre></li> <li><code>keystore_key_types?</code> string[] - defines which keystore keys should be created</li> <li><code>count</code> number | string - number of nodes to launch for this group</li> <li><code>delay_network_settings?</code> DelayNetworkSettings - sets the expected configuration to delay the network. The <code>DelayNetworkSettings</code> interface is defined as follows:   <pre><code>export interface DelayNetworkSettings {\n  latency: string;\n  correlation?: string; // should be parsable as float by k8s\n  jitter?: string;\n}\n</code></pre></li> </ul> <p>The following configuration file defines a minimal example for the relay chain, including the <code>node_groups</code> key:</p> TOMLJSON relaychain-example-node-groups.toml<pre><code>[relaychain]\ndefault_command = \"polkadot\"\ndefault_image = \"polkadot-debug:master\"\nchain = \"rococo-local\"\nchain_spec_path = \"/path/to/chain-spec.json\"\ndefault_args = [\"--chain\", \"rococo-local\"]\n\n[[relaychain.node_groups]]\nname = \"group-1\"\ncount = 2\nimage = \"polkadot-debug:master\"\ncommand = \"polkadot\"\nargs = [\"--chain\", \"rococo-local\"]\n...\n</code></pre> relaychain-example-node-groups.json<pre><code>{\n    ...,\n    \"relaychain\": {\n        \"default_command\": \"polkadot\",\n        \"default_image\": \"polkadot-debug:master\",\n        \"chain\": \"rococo-local\",\n        \"chain_spec_path\": \"/path/to/chain-spec.json\",\n        \"default_args\": [\"--chain\", \"rococo-local\"],\n        \"node_groups\": [\n            {\n                \"name\": \"group-1\",\n                \"count\": 2,\n                \"image\": \"polkadot-debug:master\",\n                \"command\": \"polkadot\",\n                \"args\": [\"--chain\", \"rococo-local\"]\n            }\n        ],\n        ...\n    },\n    ...\n}\n</code></pre>"},{"location":"develop/application-devs/tooling/zombienet/overview/#parachain-configuration","title":"Parachain Configuration","text":"<p>The <code>parachain</code> keyword is used to define further parameters for the parachain. The available keys are:</p> <ul> <li><code>id</code> number - the id to assign to this parachain. Must be unique</li> <li><code>chain?</code> string - the chain name</li> <li><code>force_decorator?</code> string - force the use of a specific decorator</li> <li><code>genesis?</code> JSON - the genesis configuration</li> <li><code>balance?</code> number - balance to set in balances for parachain's account</li> <li><code>delay_network_settings?</code> DelayNetworkSettings - sets the expected configuration to delay the network. The <code>DelayNetworkSettings</code> interface is defined as follows:   <pre><code>export interface DelayNetworkSettings {\n  latency: string;\n  correlation?: string; // should be parsable as float by k8s\n  jitter?: string;\n}\n</code></pre></li> <li><code>add_to_genesis?</code> boolean - flag to add parachain to genesis or register in runtime. Defaults to <code>true</code></li> <li><code>register_para?</code> boolean - flag to specify whether the para should be registered. The <code>add_to_genesis</code> flag must be set to false for this flag to have any effect. Defaults to <code>true</code></li> <li><code>onboard_as_parachain?</code> boolean - flag to specify whether the para should be onboarded as a parachain, rather than remaining a parathread. Defaults to <code>true</code></li> <li><code>genesis_wasm_path?</code> string - path to the Wasm file to use</li> <li><code>genesis_wasm_generator?</code> string - command to generate the Wasm file</li> <li><code>genesis_state_path?</code> string - path to the state file to use</li> <li><code>genesis_state_generator?</code> string - command to generate the state file</li> <li><code>chain_spec_path?</code> string - path to the chain spec file</li> <li><code>chain_spec_command?</code> string - command to generate the chain spec</li> <li><code>cumulus_based?</code> boolean - flag to use cumulus command generation. Defaults to <code>true</code></li> <li><code>bootnodes?</code> string[] - array of bootnodes to use</li> <li><code>prometheus_prefix?</code> string - parameter for customizing the metric's prefix for all parachain nodes/collators. Defaults to <code>substrate</code></li> <li><code>collator?</code> Collator - further defined on the Collator Configuration section</li> <li><code>collators?</code> Collator[] - an array of collators to spawn. It is further defined on the Collator Configuration section</li> <li><code>collator_groups?</code> CollatorGroup[] - an array of collator groups to spawn. It is further defined on the Collator Groups section</li> </ul> <p>For example, the following configuration file defines a minimal example for the parachain:</p> TOMLJSON parachain-example.toml<pre><code>[parachain]\nid = 100\nadd_to_genesis = true\ncumulus_based = true\ngenesis_wasm_path = \"/path/to/wasm\"\ngenesis_state_path = \"/path/to/state\"\n...\n</code></pre> parachain-example.json<pre><code>{\n    \"parachain\": {\n      \"id\": 100,\n      \"add_to_genesis\": true,\n      \"cumulus_based\": true,\n      \"genesis_wasm_path\": \"/path/to/wasm\",\n      \"genesis_state_path\": \"/path/to/state\",\n      ...\n    },\n    ...\n}\n</code></pre>"},{"location":"develop/application-devs/tooling/zombienet/overview/#collator-configuration","title":"Collator Configuration","text":"<p>One specific key capable of receiving more subkeys is the <code>collator</code> key. This key is used to define further parameters for the nodes. The available keys are:</p> <ul> <li><code>name</code> string - name of the collator. Any whitespace will be replaced with a dash (for example, <code>new alice</code> will be converted to <code>new-alice</code>)</li> <li><code>image?</code> string - image to use for the collator</li> <li><code>command_with_args?</code> string - overrides both command and arguments for the collator</li> <li><code>validator</code> boolean - pass the <code>--validator</code> flag to the command. Defaults to <code>true</code></li> <li><code>invulnerable</code> boolean - if true, add the collator to invulnerables in the chain spec. Defaults to <code>false</code></li> <li><code>balance</code> number - balance to set in balances for collator's account. Defaults to <code>2000000000000</code></li> <li><code>bootnodes?</code> string[] - array of bootnodes to use</li> <li><code>add_to_bootnodes?</code> boolean - add this collator to the bootnode list. Defaults to <code>false</code></li> <li><code>ws_port?</code> number - WS port to use</li> <li><code>rpc_port?</code> number - RPC port to use</li> <li><code>prometheus_port?</code> number - Prometheus port to use</li> <li><code>p2p_port?</code> number - P2P port to use</li> <li><code>p2p_cert_hash?</code> string - libp2p certhash to use with webRTC transport</li> <li><code>delay_network_settings?</code> DelayNetworkSettings - sets the expected configuration to delay the network. The <code>DelayNetworkSettings</code> interface is defined as follows:   <pre><code>export interface DelayNetworkSettings {\n  latency: string;\n  correlation?: string; // should be parsable as float by k8s\n  jitter?: string;\n}\n</code></pre></li> <li><code>command?</code> string - override default command to run</li> <li><code>args?</code> string[] - arguments to be passed to the command</li> <li><code>env?</code> envVars[] - environment variables to set in the container. The <code>envVars</code> interface is defined as follows:   <pre><code>export interface EnvVars {\n  name: string;\n  value: string;\n}\n</code></pre></li> <li><code>overrides?</code> Override[] - array of overrides definitions. The <code>Override</code> interface is defined as follows:   <pre><code>export interface Override {\n  local_path: string;\n  remote_name: string;\n}\n</code></pre></li> <li><code>prometheus_prefix?</code> string - customizes the metric's prefix for the specific node. Defaults to <code>substrate</code></li> <li><code>db_snapshot?</code> string - database snapshot to use</li> <li><code>substrate_cli_args_version?</code> SubstrateCliArgsVersion - set the Substrate CLI arguments version directly to skip binary evaluation overhead. The <code>SubstrateCliArgsVersion</code> enum is defined as follows:   <pre><code>export enum SubstrateCliArgsVersion {\n  V0 = 0,\n  V1 = 1,\n  V2 = 2,\n  V3 = 3,\n}\n</code></pre></li> <li><code>resources?</code> Resources - represent the resources limits/reservations needed by the node. The <code>Resources</code> interface is defined as follows:   <pre><code>export interface Resources {\n  resources: {\n    requests?: {\n      memory?: string;\n      cpu?: string;\n    };\n    limits?: {\n      memory?: string;\n      cpu?: string;\n    };\n  };\n}\n</code></pre></li> <li><code>keystore_key_types?</code> string[] - defines which keystore keys should be created</li> </ul> <p>The configuration file below defines a minimal example for the collator:</p> TOMLJSON collator-example.toml<pre><code>[parachain]\nid = 100\nadd_to_genesis = true\ncumulus_based = true\ngenesis_wasm_path = \"/path/to/wasm\"\ngenesis_state_path = \"/path/to/state\"\n\n[[parachain.collators]]\nname = \"alice\"\nimage = \"polkadot-parachain\"\ncommand = \"polkadot-parachain\"\n...\n</code></pre> collator-example.json<pre><code>{\n    \"parachain\": {\n      \"id\": 100,\n      \"add_to_genesis\": true,\n      \"cumulus_based\": true,\n      \"genesis_wasm_path\": \"/path/to/wasm\",\n      \"genesis_state_path\": \"/path/to/state\",\n      \"collators\": [\n        {\n          \"name\": \"alice\",\n          \"image\": \"polkadot-parachain\",\n          \"command\": \"polkadot-parachain\",\n          ...\n        },\n      ],\n    },\n    ...\n  }\n</code></pre>"},{"location":"develop/application-devs/tooling/zombienet/overview/#collator-groups","title":"Collator Groups","text":"<p>The <code>collator_groups</code> key is used to define further parameters for the collator groups. The available keys are:</p> <ul> <li><code>name</code> string - name of the node. Any whitespace will be replaced with a dash (for example, <code>new alice</code> will be converted to <code>new-alice</code>)</li> <li><code>image?</code> string - override default Docker image to use for this node</li> <li><code>command?</code> string - override default command to run</li> <li><code>args?</code> string[] - arguments to be passed to the command</li> <li><code>env?</code> envVars[] - environment variables to set in the container. The <code>envVars</code> interface is defined as follows:   <pre><code>export interface EnvVars {\n  name: string;\n  value: string;\n}\n</code></pre></li> <li><code>overrides?</code> Override[] - array of overrides definitions. The <code>Override</code> interface is defined as follows:   <pre><code>export interface Override {\n  local_path: string;\n  remote_name: string;\n}\n</code></pre></li> <li><code>prometheus_prefix?</code> string - customizes the metric's prefix for the specific node. Defaults to <code>substrate</code></li> <li><code>db_snapshot?</code> string - database snapshot to use</li> <li><code>substrate_cli_args_version?</code> SubstrateCliArgsVersion - set the Substrate CLI arguments version directly to skip binary evaluation overhead. The <code>SubstrateCliArgsVersion</code> enum is defined as follows:   <pre><code>export enum SubstrateCliArgsVersion {\n  V0 = 0,\n  V1 = 1,\n  V2 = 2,\n  V3 = 3,\n}\n</code></pre></li> <li><code>resources?</code> Resources - represent the resources limits/reservations needed by the node. The <code>Resources</code> interface is defined as follows:   <pre><code>export interface Resources {\n  resources: {\n    requests?: {\n      memory?: string;\n      cpu?: string;\n    };\n    limits?: {\n      memory?: string;\n      cpu?: string;\n    };\n  };\n}\n</code></pre></li> <li><code>keystore_key_types?</code> string[] - defines which keystore keys should be created</li> <li><code>count</code> number | string - number of nodes to launch for this group</li> <li><code>delay_network_settings?</code> DelayNetworkSettings - sets the expected configuration to delay the network. The <code>DelayNetworkSettings</code> interface is defined as follows:   <pre><code>export interface DelayNetworkSettings {\n  latency: string;\n  correlation?: string; // should be parsable as float by k8s\n  jitter?: string;\n}\n</code></pre></li> </ul> <p>For instance, the configuration file below defines a minimal example for the collator groups:</p> TOMLJSON collator-groups-example.toml<pre><code>[parachain]\nid = 100\nadd_to_genesis = true\ncumulus_based = true\ngenesis_wasm_path = \"/path/to/wasm\"\ngenesis_state_path = \"/path/to/state\"\n\n[[parachain.collator_groups]]\nname = \"group-1\"\ncount = 2\nimage = \"polkadot-parachain\"\ncommand = \"polkadot-parachain\"\n...\n</code></pre> collator-groups-example.json<pre><code>{\n    \"parachain\": {\n        \"id\": 100,\n        \"add_to_genesis\": true,\n        \"cumulus_based\": true,\n        \"genesis_wasm_path\": \"/path/to/wasm\",\n        \"genesis_state_path\": \"/path/to/state\",\n        \"collator_groups\": [\n            {\n                \"name\": \"group-1\",\n                \"count\": 2,\n                \"image\": \"polkadot-parachain\",\n                \"command\": \"polkadot-parachain\",\n          ...\n            },\n        ],\n    },\n    ...\n}\n</code></pre>"},{"location":"develop/application-devs/tooling/zombienet/overview/#xcm-configuration","title":"XCM Configuration","text":"<p>You can use the <code>hrmp_channels</code> keyword to define further parameters for the XCM channels at start-up. The available keys are:</p> <ul> <li> <p><code>hrmp_channels</code> HrmpChannelsConfig[] - array of Horizontal Relay-routed Message Passing (HRMP) channel configurations. The <code>HrmpChannelsConfig</code> interface is defined as follows:   <pre><code>export interface HrmpChannelsConfig {\n  sender: number;\n  recipient: number;\n  max_capacity: number;\n  max_message_size: number;\n}\n</code></pre> Each of the <code>HrmpChannelsConfig</code> keys are defined as follows:</p> </li> <li> <p><code>sender</code> number - parachain ID of the sender</p> </li> <li><code>recipient</code> number - parachain ID of the recipient</li> <li><code>max_capacity</code> number - maximum capacity of the HRMP channel</li> <li><code>max_message_size</code> number - maximum message size allowed in the HRMP channel</li> </ul>"},{"location":"develop/application-devs/tooling/zombienet/testing/","title":"Testing DSL","text":"<p>Zombienet provides a Domain Specific Language (DSL) for writing tests. The DSL is designed to be human-readable and allows you to write tests using natural language expressions. You can define assertions and tests against the spawned network using this DSL. This way, users can evaluate different metrics, such as:</p> <ul> <li>On-chain storage - the storage of each of the chains running via Zombienet</li> <li>Metrics - the metrics provided by the nodes</li> <li>Histograms - visual representations of metrics data</li> <li>Logs - detailed records of system activities and events</li> <li>System events - notifications of significant occurrences within the network</li> <li>Tracing - detailed analysis of execution paths and operations</li> <li>Custom API calls (through Polkadot.js) - personalized interfaces for interacting with the network</li> <li>Commands - instructions or directives executed by the network</li> </ul> <p>These abstractions are expressed by sentences defined in a natural language style. Therefore, each test line will be mapped to a test to run. Also, the test file (<code>*.zndsl</code>) includes pre-defined header fields used to define information about the suite, such as network configuration and credentials location.</p>"},{"location":"develop/application-devs/tooling/zombienet/testing/#the-test-file","title":"The Test File","text":""},{"location":"develop/application-devs/tooling/zombienet/testing/#name","title":"Name","text":"<p>The test name in Zombienet is derived from the filename by removing any leading numeric characters before the first hyphen. For example, a file named <code>0001-zombienet-test.zndsl</code> will result in a test name of <code>zombienet-test</code>, which will be displayed in the test report output of the runner.</p>"},{"location":"develop/application-devs/tooling/zombienet/testing/#structure","title":"Structure","text":"<p>The test file is a text file with the extension <code>.zndsl</code>. It is divided into two parts: the header and the body. The header contains the network configuration and the credentials to use, while the body contains the tests to run.</p> <p>The header is defined by the following fields:</p> <ul> <li><code>description</code> string - long description of the test suite (optional)</li> <li><code>network</code> string - path to the network definition file, supported in both <code>.json</code> and <code>.toml</code> formats</li> <li><code>creds</code> string - credentials filename or path to use (available only with Kubernetes provider). Looks in the current directory or <code>$HOME/.kube/</code> if a filename is passed</li> </ul> <p>The body contains the tests to run. Each test is defined by a sentence in the DSL, which is mapped to a test to run. Each test line defines an assertion or a command to be executed against the spawned network.</p>"},{"location":"develop/application-devs/tooling/zombienet/testing/#assertions","title":"Assertions","text":"<p>Assertions are defined by sentences in the DSL that evaluate different metrics, such as on-chain storage, metrics, histograms, logs, system events, tracing, and custom API calls. Each assertion is defined by a sentence in the DSL, which is mapped to a test to run.</p> <code>Well known functions</code> - already mapped test function SyntaxExamples <ul> <li><code>node-name well-known_defined_test [within x seconds]</code></li> </ul> <pre><code>alice: is up\nalice: parachain 100 is registered within 225 seconds\nalice: parachain 100 block height is at least 10 within 250 seconds\n</code></pre> <code>Histogram</code> - get metrics from Prometheus, calculate the histogram and, assert on the target value/s SyntaxExample <ul> <li><code>node-name reports histogram memtric_name has comparator target_value samples in buckets [\"bucket\",\"bucket\",...] [within x seconds]</code></li> </ul> <pre><code>alice: reports histogram polkadot_pvf_execution_time has at least 2 samples in buckets [\"0.1\", \"0.25\", \"0.5\", \"+Inf\"] within 100 seconds\n</code></pre> <code>Metric</code> - get metric from Prometheus and assert on the target value SyntaxExamples <ul> <li><code>node-name reports metric_name comparator target_value (e.g \"is at least x\", \"is greater than x\") [within x seconds]</code></li> </ul> <pre><code>alice: reports node_roles is 4\nalice: reports sub_libp2p_is_major_syncing is 0\n</code></pre> <code>Log line</code> - get logs from nodes and assert on the matching pattern SyntaxExample <ul> <li><code>node-name log line (contains|matches) (regex|glob) \"pattern\" [within x seconds]</code></li> </ul> <pre><code>alice: log line matches glob \"rted #1\" within 10 seconds\n</code></pre> <code>Count of log lines</code> - get logs from nodes and assert on the number of lines matching pattern SyntaxExample <ul> <li><code>node-name count of log lines (containing|matcheing) (regex|glob) \"pattern\" [within x seconds]</code></li> </ul> <pre><code>alice: count of log lines matching glob \"rted #1\" within 10 seconds\n</code></pre> <code>System events</code> - find a system event from subscription by matching a pattern SyntaxExample <ul> <li><code>node-name system event (contains|matches)(regex| glob) \"pattern\" [within x seconds]</code></li> </ul> <pre><code>alice: system event matches \"\"paraId\":[0-9]+\" within 10 seconds\n</code></pre> <code>Tracing</code> - match an array of span names from the supplied traceID SyntaxExample <ul> <li><code>node-name trace with traceID contains [\"name\", \"name2\",...]</code></li> </ul> <pre><code>alice: trace with traceID 94c1501a78a0d83c498cc92deec264d9 contains [\"answer-chunk-request\", \"answer-chunk-request\"]\n</code></pre> <code>Custom JS scripts</code> - run a custom JS script and assert on the return value SyntaxExample <ul> <li><code>node-name js-script script_relative_path [return is comparator target_value] [within x seconds]</code></li> </ul> <pre><code>alice: js-script ./0008-custom.js return is greater than 1 within 200 seconds\n</code></pre> <code>Custom TS scripts</code> - run a custom TS script and assert on the return value SyntaxExample <ul> <li><code>node-name ts-script script_relative_path [return is comparator target_value] [within x seconds]</code></li> </ul> <pre><code>alice: ts-script ./0008-custom-ts.ts return is greater than 1 within 200 seconds\n</code></pre> <code>Backchannel</code> - wait for a value and register to use SyntaxExample <ul> <li><code>node-name wait for var name and use as X [within x seconds]</code></li> </ul> <pre><code>alice: wait for name and use as X within 30 seconds\n</code></pre>"},{"location":"develop/application-devs/tooling/zombienet/testing/#commands","title":"Commands","text":"<p>Commands allow interaction with the nodes and can run pre-defined commands or an arbitrary command in the node.</p> <code>restart</code> - stop the process and start again after the <code>X</code> amount of seconds or immediately Syntax <ul> <li><code>node-name restart [after x seconds]</code></li> </ul> <code>pause</code> - pause (SIGSTOP) the process Syntax <ul> <li><code>node-name pause</code></li> </ul> <code>resume</code> - resume (SIGCONT) the process Syntax <ul> <li><code>node-name resume</code></li> </ul> <code>sleep</code> - sleep the test-runner for <code>x</code> amount of seconds Syntax <ul> <li><code>sleep x</code></li> </ul>"},{"location":"develop/application-devs/tooling/zombienet/testing/#example","title":"Example","text":"<p>For example, the following test file defines two tests: a small network test and a big network test. Each test defines a network configuration file and credentials to use.</p> <p>The tests define assertions to evaluate the network\u2019s metrics and logs. The assertions are defined by sentences in the DSL, which are mapped to tests to run.</p> <pre><code>Description: Small Network test\nNetwork: ./0000-test-config-small-network.toml\nCreds: config\n\n# metrics\nalice: reports node_roles is 4\nalice: reports sub_libp2p_is_major_syncing is 0\n\n# logs\nbob: log line matches glob \"*rted #1*\" within 10 seconds\nbob: log line matches \"Imported #[0-9]+\" within 10 seconds\n</code></pre> <p>And the second test file:</p> <pre><code>Description: Big Network test\nNetwork: ./0001-test-config-big-network.toml\nCreds: config\n\n# metrics\nalice: reports node_roles is 4\nalice: reports sub_libp2p_is_major_syncing is 0\n\n# logs\nbob: log line matches glob \"*rted #1*\" within 10 seconds\nbob: log line matches \"Imported #[0-9]+\" within 10 seconds\n\n# custom js script\nalice: js-script ./0008-custom.js return is greater than 1 within 200 seconds\n\n# custom ts script\nalice: ts-script ./0008-custom-ts.ts return is greater than 1 within 200 seconds\n\n# backchannel\nalice: wait for name and use as X within 30 seconds\n\n# well know functions\nalice: is up\nalice: parachain 100 is registered within 225 seconds\nalice: parachain 100 block height is at least 10 within 250 seconds\n\n# histogram\nalice: reports histogram polkadot_pvf_execution_time has at least 2 samples in buckets [\"0.1\", \"0.25\", \"0.5\", \"+Inf\"] within 100 seconds\n\n# system events\nalice: system event matches \"\"paraId\":[0-9]+\" within 10 seconds\n\n# tracing\nalice: trace with traceID 94c1501a78a0d83c498cc92deec264d9 contains [\"answer-chunk-request\", \"answer-chunk-request\"]\n</code></pre>"},{"location":"develop/application-devs/tooling/zombienet/testing/#running-tests","title":"Running Tests","text":"<p>To run the tests using the local provider (<code>native</code>), you can use the Zombienet binary. The binary will read the test files and execute the tests defined in the DSL. The binary will output the results of the tests in the console.</p> <pre><code>zombienet -p native test INSERT_TEST_FILE_NAME\n</code></pre> <p>Note</p> <p>Replace <code>INSERT_TEST_FILE_NAME</code> with the path to the test file you want to run.</p>"},{"location":"develop/application-devs/tooling/zombienet/tutorials/spawn-a-basic-network/","title":"Spawn a Basic Network","text":""},{"location":"develop/application-devs/tooling/zombienet/tutorials/spawn-a-basic-network/#introduction","title":"Introduction","text":"<p>In this tutorial, you'll learn how to set up a basic network using Zombienet and run a simple test to validate its functionality. The example provided walks you through defining a minimal network configuration, spawning the network, and interacting with the nodes. By the end, you'll clearly understand how to use Zombienet to deploy and test ephemeral blockchain networks, setting the stage for more complex scenarios.</p>"},{"location":"develop/application-devs/tooling/zombienet/tutorials/spawn-a-basic-network/#prerequisites","title":"Prerequisites","text":"<p>To follow this tutorial, first, you need to have Zombienet installed. If you haven't done so, please follow the instructions in the Installation section.</p>"},{"location":"develop/application-devs/tooling/zombienet/tutorials/spawn-a-basic-network/#defining-the-network","title":"Defining the Network","text":"<p>As mentioned in the Configuration Files section, Zombienet uses a configuration file to define the ephemeral network that will be spawned. To follow this tutorial, create a file named <code>spawn-a-basic-network.toml</code> with the following content:</p> <pre><code>[settings]\ntimeout = 120\n\n[relaychain]\n\n[[relaychain.nodes]]\nname = \"alice\"\nvalidator = true\n\n[[relaychain.nodes]]\nname = \"bob\"\nvalidator = true\n\n[[parachains]]\nid = 100\n\n  [parachains.collator]\n  name = \"collator01\"\n</code></pre> <p>This configuration file defines a network with a relaychain with two nodes, <code>alice</code> and <code>bob</code>, and a parachain with a collator named <code>collator01</code>. Also, it sets a timeout of 120 seconds for the network to be ready.</p>"},{"location":"develop/application-devs/tooling/zombienet/tutorials/spawn-a-basic-network/#running-the-network","title":"Running the Network","text":"<p>To spawn the network, run the following command:</p> <pre><code>zombienet -p native spawn spawn-a-basic-network.toml\n</code></pre> <p>This command will spawn the network defined in the <code>spawn-a-basic-network.toml</code> configuration file. The <code>-p native</code> flag specifies that the network will be spawned using the native provider.</p> <p>If successful, you will see the following output:</p> zombienet -p native spawn spawn-a-basic-network.toml                      Network launched \ud83d\ude80\ud83d\ude80                  Namespace zombie-75a01b93c92d571f6198a67bcb380fcd Provider native                  Node Information                  Name alice Direct Link https://polkadot.js.org/apps/?rpc=ws://127.0.0.1:55308#explorer Prometheus Link http://127.0.0.1:55310/metrics Log Cmd tail -f /var/folders/f4/7rdt2m9d7j361dm453cpggbm0000gn/T/zombie-75a01b93c92d571f6198a67bcb380fcd_21724-2                  Node Information                  Name bob Direct Link https://polkadot.js.org/apps/?rpc=ws://127.0.0.1:55312#explorer Prometheus Link http://127.0.0.1:50634/metrics Log Cmd tail -f /var/folders/f4/7rdt2m9d7j361dm453cpggbm0000gn/T/zombie-75a01b93c92d571f6198a67bcb380fcd_21724-2                  Node Information                  Name collator01 Direct Link https://polkadot.js.org/apps/?rpc=ws://127.0.0.1:55316#explorer Prometheus Link http://127.0.0.1:55318/metrics Log Cmd tail -f /var/folders/f4/7rdt2m9d7j361dm453cpggbm0000gn/T/zombie-75a01b93c92d571f6198a67bcb380fcd_21724-2 Parachain ID 100 ChainSpec Path /var/folders/f4/7rdt2m9d7j361dm453cpggbm0000gn/T/zombie-75a01b93c92d571f6198a67bcb380fcd_21724-2 <p>Note</p> <p>If the IPs and ports aren't explicitly defined in the configuration file, they may change each time the network is started, causing the links provided in the output to differ from the example.</p>"},{"location":"develop/application-devs/tooling/zombienet/tutorials/spawn-a-basic-network/#interacting-with-the-spawned-network","title":"Interacting with the Spawned Network","text":""},{"location":"develop/application-devs/tooling/zombienet/tutorials/spawn-a-basic-network/#connecting-to-the-nodes","title":"Connecting to the Nodes","text":"<p>After the network is launched, you can interact with it using Polkadot.js Apps. To do so, open your browser and use the provided links listed by the output as <code>Direct Link</code>. For instance, in this particular case, as the ports may vary from spawning to spawning, to interact with the <code>alice</code> node, open https://polkadot.js.org/apps/?rpc=ws://127.0.0.1:55308#explorer as it is the link provided in the output for the <code>alice</code> node. Moreover, you can also do this for the <code>bob</code> and <code>collator01</code> nodes.</p> <p>If you want to interact with the nodes more programmatically, you can also use the Polkadot.js API. For example, the following code snippet shows how to connect to the <code>alice</code> node using the Polkadot.js API and log some information about the chain and node:</p> <pre><code>import { ApiPromise, WsProvider } from '@polkadot/api';\n\nasync function main() {\n  const wsProvider = new WsProvider('ws://127.0.0.1:55308');\n    const api = await ApiPromise.create({ provider: wsProvider });\n\n    // Retrieve the chain &amp; node information via rpc calls\n    const [chain, nodeName, nodeVersion] = await Promise.all([\n        api.rpc.system.chain(),\n        api.rpc.system.name(),\n        api.rpc.system.version()\n    ]);\n\n    console.log(`You are connected to chain ${chain} using ${nodeName} v${nodeVersion}`);\n}\n\nmain().catch(console.error).finally(() =&gt; process.exit());\n</code></pre> <p>Either way allows you to interact easily with the network and its nodes.</p>"},{"location":"develop/application-devs/tooling/zombienet/tutorials/spawn-a-basic-network/#checking-metrics","title":"Checking Metrics","text":"<p>You can also check the metrics of the nodes by accessing the provided links listed by the output as <code>Prometheus Link</code>. Prometheus is a monitoring and alerting toolkit that collects metrics from the nodes. By accessing the provided links, you can see the metrics of the nodes in a web interface. So, for example, the following image shows the Prometheus metrics for Bob\u2019s node from the Zombienet test:</p> <p></p>"},{"location":"develop/application-devs/tooling/zombienet/tutorials/spawn-a-basic-network/#checking-logs","title":"Checking Logs","text":"<p>To check the nodes\u2019 logs, you can use the provided command listed by the output as 'Log Cmd'. For instance, to check the logs of the <code>alice</code> node, you can open a new terminal and run the following command:</p> <pre><code>tail -f /var/folders/f4/7rdt2m9d7j361dm453cpggbm0000gn/T/zombie-75a01b93c92d571f6198a67bcb380fcd_21724-SEzfCidQ1za4/alice.log\n</code></pre> <p>After running this command, you will see the logs of the <code>alice</code> node in real-time, which can be useful for debugging purposes. The logs of the <code>bob</code> and <code>collator01</code> nodes can be checked similarly.</p>"},{"location":"develop/application-devs/tooling/zombienet/tutorials/spawn-a-basic-network/#running-a-test","title":"Running a Test","text":"<p>To run a test against the spawned network, you can use the Zombienet DSL to define the test scenario. For example, you can create a file named <code>spawn-a-basic-network-test.zndsl</code> with the following content:</p> <pre><code>Description: Test the basic functionality of the network (minimal example)\nNetwork: ./spawn-a-basic-network.toml\nCreds: config\n\nalice: is up\nalice: parachain 100 is registered within 225 seconds\nalice: parachain 100 block height is at least 10 within 250 seconds\n\nbob: is up\nbob: parachain 100 is registered within 225 seconds\nbob: parachain 100 block height is at least 10 within 250 seconds\n\n# metrics\nalice: reports node_roles is 4\nalice: reports sub_libp2p_is_major_syncing is 0\n\nbob: reports node_roles is 4\n\ncollator01: reports node_roles is 4\n</code></pre> <p>This test scenario checks to verify the following:</p> <ul> <li>the nodes are running</li> <li>the parachain with ID 100 is registered within a certain timeframe (255 seconds in this example)</li> <li>the parachain block height is at least a certain number within a timeframe (in this case, 10 within 255 seconds)</li> <li>the nodes report metrics </li> </ul> <p>However, you can define any test scenario following the Zombienet DSL syntax.</p> <p>To run the test, execute the following command:</p> <pre><code>zombienet -p native test spawn-a-basic-network-test.zndsl\n</code></pre> <p>This command will execute the test scenario defined in the <code>spawn-a-basic-network-test.zndsl</code> file on the network. If successful, the terminal will display the test output, indicating whether the test passed or failed.</p>"},{"location":"images/","title":"Images","text":"<p>TODO</p>"}]}